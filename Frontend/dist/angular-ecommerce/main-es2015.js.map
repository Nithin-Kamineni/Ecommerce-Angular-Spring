{"version":3,"sources":["./src/app/components/cart-details/cart-details.component.ts","./src/app/components/cart-details/cart-details.component.html","./src/app/common/order.ts","./src/environments/environment.ts","./src/app/common/purchase.ts","./src/app/components/members-page/members-page.component.ts","./src/app/components/members-page/members-page.component.html","./src/app/services/product.service.ts","./src/app/services/luv2-shop-form.service.ts","./src/app/common/payment-info.ts","./src/app/services/order-history.service.ts","./src/app/common/cart-item.ts","./src/app/components/checkout/checkout.component.ts","./src/app/components/checkout/checkout.component.html","./src/app/components/search/search.component.ts","./src/app/components/search/search.component.html","./src/app/services/checkout.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/common/product.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/common/order-item.ts","./src/app/components/cart-status/cart-status.component.ts","./src/app/components/cart-status/cart-status.component.html","./src/app/app.module.ts","./src/app/components/product-category-menu/product-category-menu.component.ts","./src/app/components/product-category-menu/product-category-menu.component.html","./src/app/components/product-details/product-details.component.ts","./src/app/components/product-details/product-details.component.html","./src/app/components/product-list/product-list.component.ts","./src/app/components/product-list/product-list-grid.component.html","./src/app/services/cart.service.ts","./src/app/components/order-history/order-history.component.ts","./src/app/components/order-history/order-history.component.html","./src/app/config/my-app-config.ts","./src/app/services/auth-interceptor.service.ts","./src/app/components/login-status/login-status.component.ts","./src/app/components/login-status/login-status.component.html","./src/app/validators/luv2-shop-validators.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-details',\n  templateUrl: './cart-details.component.html',\n  styleUrls: ['./cart-details.component.css']\n})\nexport class CartDetailsComponent implements OnInit {\n\n  cartItems: CartItem[] = [];\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.listCartDetails();\n  }\n\n  listCartDetails() {\n\n    // get a handle to the cart items\n    this.cartItems = this.cartService.cartItems;\n\n    // subscribe to the cart totalPrice\n    this.cartService.totalPrice.subscribe(\n      data => this.totalPrice = data\n    );\n\n    // subscribe to the cart totalQuantity\n    this.cartService.totalQuantity.subscribe( \n      data => this.totalQuantity = data\n    );\n\n    // compute cart total price and quantity\n    this.cartService.computeCartTotals();\n  }\n\n  incrementQuantity(theCartItem: CartItem) {\n    this.cartService.addToCart(theCartItem);\n  }\n\n  decrementQuantity(theCartItem: CartItem) {\n    this.cartService.decrementQuantity(theCartItem);\n  }\n\n  remove(theCartItem: CartItem) {\n    this.cartService.remove(theCartItem);\n  }\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n\n            <div *ngIf=\"cartItems.length > 0\">\n\n                <table class=\"table table-bordered\">\n                    <tr>\n                        <th width=\"20%\">Product Image</th>\n                        <th width=\"50%\">Product Detail</th>\n                        <th width=\"30%\"></th>\n                    </tr>\n\n                    <tr *ngFor=\"let tempCartItem of cartItems\">\n                        <td>\n                            <img src=\"{{ tempCartItem.imageUrl }}\" class=\"img-responsive\" width=\"150px\" />\n                        </td>\n                        <td>\n                            <p>{{ tempCartItem.name }}</p>\n                            <p>{{ tempCartItem.unitPrice | currency: 'USD' }}</p>\n                        </td>\n                        <td>\n                            <div class=\"items\">\n                                <label>Quantity:</label>\n\n                                <div class=\"row no-gutters\">\n                                    <div class=\"col\">\n                                        <button (click)=\"incrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\n                                            <i class=\"fas fa-plus\"></i>\n                                        </button>\n                                    </div>\n\n                                    <div class=\"col ml-4 mr-2\">\n                                        {{ tempCartItem.quantity }}\n                                    </div>\n\n                                    <div class=\"col\">\n                                        <button (click)=\"decrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\n                                            <i class=\"fas fa-minus\"></i>\n                                        </button>\n                                    </div>\n\n                                    <div class=\"col-8\"></div>\n                                </div>\n\n                            </div>\n\n                            <button (click)=\"remove(tempCartItem)\" class=\"btn btn-primary btn-sm mt-2\">Remove</button>\n\n                            <p class=\"mt-2\">Subtotal: {{ tempCartItem.quantity * tempCartItem.unitPrice | currency: 'USD' }}</p>\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colspan=\"2\"></td>\n                        <td style=\"font-weight: bold\">\n                            <p>Total Quantity: {{ totalQuantity }}</p>\n                            <p>Shipping: FREE</p>\n                            <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\n                            <a routerLink=\"/checkout\" class=\"btn btn-primary\">Checkout</a>\n                        </td>\n                    </tr>\n\n                </table>\n\n            </div>\n\n            <!-- if cart is empty then display a message -->\n            <div *ngIf=\"cartItems.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                Your shopping cart is empty. \n            </div>\n\n        </div>\n    </div>\n</div>\n","export class Order {\n    totalQuantity: number;\n    totalPrice: number;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  luv2shopApiUrl: \"https://localhost:8443/api\",\n  stripePublishableKey: \"pk_test_51N8oqULTz1e1vpakxAfq3mOwj7PNGsd2KLR3rzO269Zijz0voN7ER3liFQmxK2dNbiQIgGbHAMRfy9CKqM4yexV300ZEMofGIl\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Address } from './address';\nimport { Customer } from './customer';\nimport { Order } from './order';\nimport { OrderItem } from './order-item';\n\nexport class Purchase {\n    customer: Customer;\n    shippingAddress: Address;\n    billingAddress: Address;\n    order: Order;\n    orderItems: OrderItem[]; \n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-members-page',\n  templateUrl: './members-page.component.html',\n  styleUrls: ['./members-page.component.css']\n})\nexport class MembersPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"main-content\">\n\n    <div align=\"center\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n        <h3>Members Special</h3>\n\n        <p>Thank you for being a member.</p>\n\n        <p>Member discounts are coming soon!!</p>\n    </div>\n    \n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProductCategory } from '../common/product-category';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private baseUrl = environment.luv2shopApiUrl + '/products';\n\n  private categoryUrl = environment.luv2shopApiUrl + '/product-category';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProduct(theProductId: number): Observable<Product> {\n\n    // need to build URL based on product id\n    const productUrl = `${this.baseUrl}/${theProductId}`;\n\n    return this.httpClient.get<Product>(productUrl);\n  }\n\n  getProductListPaginate(thePage: number, \n                         thePageSize: number, \n                         theCategoryId: number): Observable<GetResponseProducts> {\n\n    // need to build URL based on category id, page and size \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`\n                    + `&page=${thePage}&size=${thePageSize}`;\n\n    console.log(`Getting products from - ${searchUrl}`);\n    \n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n\n  getProductList(theCategoryId: number): Observable<Product[]> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n\n    return this.getProducts(searchUrl);\n  }\n\n  searchProducts(theKeyword: string): Observable<Product[]> {\n\n    // need to build URL based on the keyword \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n\n    return this.getProducts(searchUrl);\n  }\n\n  searchProductsPaginate(thePage: number, \n                        thePageSize: number, \n                        theKeyword: string): Observable<GetResponseProducts> {\n\n    // need to build URL based on keyword, page and size \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`\n                    + `&page=${thePage}&size=${thePageSize}`;\n    \n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n\n\n  private getProducts(searchUrl: string): Observable<Product[]> {\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response => response._embedded.products));\n  }\n\n  getProductCategories(): Observable<ProductCategory[]> {\n\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\n      map(response => response._embedded.productCategory)\n    );\n  }\n\n}\n\ninterface GetResponseProducts {\n  _embedded: {\n    products: Product[];\n  },\n  page: {\n    size: number,\n    totalElements: number,\n    totalPages: number,\n    number: number\n  }\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: ProductCategory[];\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Country } from '../common/country';\nimport { map } from 'rxjs/operators';\nimport { State } from '../common/state';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Luv2ShopFormService {\n\n  private countriesUrl = environment.luv2shopApiUrl + '/countries';\n  private statesUrl = environment.luv2shopApiUrl + '/states';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getCountries(): Observable<Country[]> {\n\n    return this.httpClient.get<GetResponseCountries>(this.countriesUrl).pipe(\n      map(response => response._embedded.countries)\n    );\n  }\n\n  getStates(theCountryCode: string): Observable<State[]> {\n\n    // search url\n    const searchStatesUrl = `${this.statesUrl}/search/findByCountryCode?code=${theCountryCode}`;\n\n    return this.httpClient.get<GetResponseStates>(searchStatesUrl).pipe(\n      map(response => response._embedded.states)\n    );\n  }\n\n\n  getCreditCardMonths(startMonth: number): Observable<number[]> {\n\n    let data: number[] = [];\n    \n    // build an array for \"Month\" dropdown list\n    // - start at current month and loop until \n\n    for (let theMonth = startMonth; theMonth <= 12; theMonth++) {\n      data.push(theMonth);\n    }\n\n    return of(data);\n  }\n\n  getCreditCardYears(): Observable<number[]> {\n\n    let data: number[] = [];\n\n    // build an array for \"Year\" downlist list\n    // - start at current year and loop for next 10 years\n    \n    const startYear: number = new Date().getFullYear();\n    const endYear: number = startYear + 10;\n\n    for (let theYear = startYear; theYear <= endYear; theYear++) {\n      data.push(theYear);\n    }\n\n    return of(data);\n  }\n\n}\n\ninterface GetResponseCountries {\n  _embedded: {\n    countries: Country[];\n  }\n}\n\ninterface GetResponseStates {\n  _embedded: {\n    states: State[];\n  }\n}","export class PaymentInfo {\n    amount: number;\n    currency: string;\n    receiptEmail: string;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { OrderHistory } from '../common/order-history';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderHistoryService {\n\n  private orderUrl = environment.luv2shopApiUrl + '/orders';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getOrderHistory(theEmail: string): Observable<GetResponseOrderHistory> {\n\n    // need to build URL based on the customer email\n    const orderHistoryUrl = `${this.orderUrl}/search/findByCustomerEmailOrderByDateCreatedDesc?email=${theEmail}`;\n\n    return this.httpClient.get<GetResponseOrderHistory>(orderHistoryUrl);\n  }\n}\n\ninterface GetResponseOrderHistory {\n  _embedded: {\n    orders: OrderHistory[];\n  }\n}\n","import { Product } from './product';\n\nexport class CartItem {\n\n    id: string;\n    name: string;\n    imageUrl: string;\n    unitPrice: number;\n\n    quantity: number;\n\n    constructor(product: Product) {\n        this.id = product.id;\n        this.name = product.name;\n        this.imageUrl = product.imageUrl;\n        this.unitPrice = product.unitPrice;\n\n        this.quantity = 1;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Luv2ShopFormService } from 'src/app/services/luv2-shop-form.service';\nimport { Country } from 'src/app/common/country';\nimport { State } from 'src/app/common/state';\nimport { Luv2ShopValidators } from 'src/app/validators/luv2-shop-validators';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CheckoutService } from 'src/app/services/checkout.service';\nimport { Router } from '@angular/router';\nimport { Order } from 'src/app/common/order';\nimport { OrderItem } from 'src/app/common/order-item';\nimport { Purchase } from 'src/app/common/purchase';\nimport { environment } from 'src/environments/environment';\nimport { PaymentInfo } from 'src/app/common/payment-info';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n\n  checkoutFormGroup: FormGroup;\n\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n  \n  creditCardYears: number[] = [];\n  creditCardMonths: number[] = [];\n\n  countries: Country[] = [];\n\n  shippingAddressStates: State[] = [];\n  billingAddressStates: State[] = [];\n    \n  storage: Storage = sessionStorage;\n\n  // initialize Stripe API\n  stripe = Stripe(environment.stripePublishableKey);\n\n  paymentInfo: PaymentInfo = new PaymentInfo();\n  cardElement: any;\n  displayError: any = \"\";\n\n  isDisabled: boolean = false;\n\n  constructor(private formBuilder: FormBuilder,\n              private luv2ShopFormService: Luv2ShopFormService,\n              private cartService: CartService,\n              private checkoutService: CheckoutService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n\n    // setup Stripe payment form\n    this.setupStripePaymentForm();\n    \n    this.reviewCartDetails();\n\n    // read the user's email address from browser storage\n    const theEmail = JSON.parse(this.storage.getItem('userEmail'));\n\n    this.checkoutFormGroup = this.formBuilder.group({\n      customer: this.formBuilder.group({\n        firstName: new FormControl('', \n                              [Validators.required, \n                               Validators.minLength(2), \n                               Luv2ShopValidators.notOnlyWhitespace]),\n\n        lastName:  new FormControl('', \n                              [Validators.required, \n                               Validators.minLength(2), \n                               Luv2ShopValidators.notOnlyWhitespace]),\n                               \n        email: new FormControl(theEmail,\n                              [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')])\n      }),\n      shippingAddress: this.formBuilder.group({\n        street: new FormControl('', [Validators.required, Validators.minLength(2), \n                                     Luv2ShopValidators.notOnlyWhitespace]),\n        city: new FormControl('', [Validators.required, Validators.minLength(2), \n                                   Luv2ShopValidators.notOnlyWhitespace]),\n        state: new FormControl('', [Validators.required]),\n        country: new FormControl('', [Validators.required]),\n        zipCode: new FormControl('', [Validators.required, Validators.minLength(2), \n                                      Luv2ShopValidators.notOnlyWhitespace])\n      }),\n      billingAddress: this.formBuilder.group({\n        street: new FormControl('', [Validators.required, Validators.minLength(2), \n                                     Luv2ShopValidators.notOnlyWhitespace]),\n        city: new FormControl('', [Validators.required, Validators.minLength(2), \n                                   Luv2ShopValidators.notOnlyWhitespace]),\n        state: new FormControl('', [Validators.required]),\n        country: new FormControl('', [Validators.required]),\n        zipCode: new FormControl('', [Validators.required, Validators.minLength(2), \n                                      Luv2ShopValidators.notOnlyWhitespace])\n      }),\n      creditCard: this.formBuilder.group({\n        /*\n        cardType: new FormControl('', [Validators.required]),\n        nameOnCard:  new FormControl('', [Validators.required, Validators.minLength(2), \n                                          Luv2ShopValidators.notOnlyWhitespace]),\n        cardNumber: new FormControl('', [Validators.required, Validators.pattern('[0-9]{16}')]),\n        securityCode: new FormControl('', [Validators.required, Validators.pattern('[0-9]{3}')]),\n        expirationMonth: [''],\n        expirationYear: ['']\n        */\n      })\n    });\n\n    /*\n    // populate credit card months\n\n    const startMonth: number = new Date().getMonth() + 1;\n    console.log(\"startMonth: \" + startMonth);\n\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\n      data => {\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\n        this.creditCardMonths = data;\n      }\n    );\n\n    // populate credit card years\n\n    this.luv2ShopFormService.getCreditCardYears().subscribe(\n      data => {\n        console.log(\"Retrieved credit card years: \" + JSON.stringify(data));\n        this.creditCardYears = data;\n      }\n    );\n    */\n\n    // populate countries\n\n    this.luv2ShopFormService.getCountries().subscribe(\n      data => {\n        console.log(\"Retrieved countries: \" + JSON.stringify(data));\n        this.countries = data;\n      }\n    );\n  }\n\n  setupStripePaymentForm() {\n\n    // get a handle to stripe elements\n    var elements = this.stripe.elements();\n\n    // Create a card element ... and hide the zip-code field\n    this.cardElement = elements.create('card', { hidePostalCode: true });\n\n    // Add an instance of card UI component into the 'card-element' div\n    this.cardElement.mount('#card-element');\n\n    // Add event binding for the 'change' event on the card element\n    this.cardElement.on('change', (event) => {\n\n      // get a handle to card-errors element\n      this.displayError = document.getElementById('card-errors');\n\n      if (event.complete) {\n        this.displayError.textContent = \"\";\n      } else if (event.error) {\n        // show validation error to customer\n        this.displayError.textContent = event.error.message;\n      }\n\n    });\n\n  }\n\n  reviewCartDetails() {\n\n    // subscribe to cartService.totalQuantity\n    this.cartService.totalQuantity.subscribe(\n      totalQuantity => this.totalQuantity = totalQuantity\n    );\n\n    // subscribe to cartService.totalPrice\n    this.cartService.totalPrice.subscribe(\n      totalPrice => this.totalPrice = totalPrice\n    );\n\n  }\n\n  get firstName() { return this.checkoutFormGroup.get('customer.firstName'); }\n  get lastName() { return this.checkoutFormGroup.get('customer.lastName'); }\n  get email() { return this.checkoutFormGroup.get('customer.email'); }\n\n  get shippingAddressStreet() { return this.checkoutFormGroup.get('shippingAddress.street'); }\n  get shippingAddressCity() { return this.checkoutFormGroup.get('shippingAddress.city'); }\n  get shippingAddressState() { return this.checkoutFormGroup.get('shippingAddress.state'); }\n  get shippingAddressZipCode() { return this.checkoutFormGroup.get('shippingAddress.zipCode'); }\n  get shippingAddressCountry() { return this.checkoutFormGroup.get('shippingAddress.country'); }\n\n  get billingAddressStreet() { return this.checkoutFormGroup.get('billingAddress.street'); }\n  get billingAddressCity() { return this.checkoutFormGroup.get('billingAddress.city'); }\n  get billingAddressState() { return this.checkoutFormGroup.get('billingAddress.state'); }\n  get billingAddressZipCode() { return this.checkoutFormGroup.get('billingAddress.zipCode'); }\n  get billingAddressCountry() { return this.checkoutFormGroup.get('billingAddress.country'); }\n\n  get creditCardType() { return this.checkoutFormGroup.get('creditCard.cardType'); }\n  get creditCardNameOnCard() { return this.checkoutFormGroup.get('creditCard.nameOnCard'); }\n  get creditCardNumber() { return this.checkoutFormGroup.get('creditCard.cardNumber'); }\n  get creditCardSecurityCode() { return this.checkoutFormGroup.get('creditCard.securityCode'); }\n\n\n\n  copyShippingAddressToBillingAddress(event) {\n\n    if (event.target.checked) {\n      this.checkoutFormGroup.controls.billingAddress\n            .setValue(this.checkoutFormGroup.controls.shippingAddress.value);\n\n      // bug fix for states\n      this.billingAddressStates = this.shippingAddressStates;\n\n    }\n    else {\n      this.checkoutFormGroup.controls.billingAddress.reset();\n\n      // bug fix for states\n      this.billingAddressStates = [];\n    }\n    \n  }\n\n  onSubmit() {\n    console.log(\"Handling the submit button\");\n\n    if (this.checkoutFormGroup.invalid) {\n      this.checkoutFormGroup.markAllAsTouched();\n      return;\n    }\n\n    // set up order\n    let order = new Order();\n    order.totalPrice = this.totalPrice;\n    order.totalQuantity = this.totalQuantity;\n\n    // get cart items\n    const cartItems = this.cartService.cartItems;\n\n    // create orderItems from cartItems\n    // - long way\n    /*\n    let orderItems: OrderItem[] = [];\n    for (let i=0; i < cartItems.length; i++) {\n      orderItems[i] = new OrderItem(cartItems[i]);\n    }\n    */\n\n    // - short way of doing the same thingy\n    let orderItems: OrderItem[] = cartItems.map(tempCartItem => new OrderItem(tempCartItem));\n\n    // set up purchase\n    let purchase = new Purchase();\n    \n    // populate purchase - customer\n    purchase.customer = this.checkoutFormGroup.controls['customer'].value;\n    \n    // populate purchase - shipping address\n    purchase.shippingAddress = this.checkoutFormGroup.controls['shippingAddress'].value;\n    const shippingState: State = JSON.parse(JSON.stringify(purchase.shippingAddress.state));\n    const shippingCountry: Country = JSON.parse(JSON.stringify(purchase.shippingAddress.country));\n    purchase.shippingAddress.state = shippingState.name;\n    purchase.shippingAddress.country = shippingCountry.name;\n\n    // populate purchase - billing address\n    purchase.billingAddress = this.checkoutFormGroup.controls['billingAddress'].value;\n    const billingState: State = JSON.parse(JSON.stringify(purchase.billingAddress.state));\n    const billingCountry: Country = JSON.parse(JSON.stringify(purchase.billingAddress.country));\n    purchase.billingAddress.state = billingState.name;\n    purchase.billingAddress.country = billingCountry.name;\n  \n    // populate purchase - order and orderItems\n    purchase.order = order;\n    purchase.orderItems = orderItems;\n\n    // compute payment info\n    this.paymentInfo.amount = Math.round(this.totalPrice * 100);\n    this.paymentInfo.currency = \"USD\"; \n    this.paymentInfo.receiptEmail = purchase.customer.email;\n\n    // if valid form then\n    // - create payment intent\n    // - confirm card payment\n    // - place order\n\n    if (!this.checkoutFormGroup.invalid && this.displayError.textContent === \"\") {\n\n      this.isDisabled = true;\n\n      this.checkoutService.createPaymentIntent(this.paymentInfo).subscribe(\n        (paymentIntentResponse) => {\n          this.stripe.confirmCardPayment(paymentIntentResponse.client_secret,\n            {\n              payment_method: {\n                card: this.cardElement,\n                billing_details: {\n                  email: purchase.customer.email,\n                  name: `${purchase.customer.firstName} ${purchase.customer.lastName}`,\n                  address: {\n                    line1: purchase.billingAddress.street,\n                    city: purchase.billingAddress.city,\n                    state: purchase.billingAddress.state,\n                    postal_code: purchase.billingAddress.zipCode,\n                    country: this.billingAddressCountry.value.code\n                  }\n                }\n              }\n            }, { handleActions: false })\n          .then(function(result) {\n            if (result.error) {\n              // inform the customer there was an error\n              alert(`There was an error: ${result.error.message}`);\n              this.isDisabled = false;\n            } else {\n              // call REST API via the CheckoutService\n              this.checkoutService.placeOrder(purchase).subscribe({\n                next: response => {\n                  alert(`Your order has been received.\\nOrder tracking number: ${response.orderTrackingNumber}`);\n\n                  // reset cart\n                  this.resetCart();\n                  this.isDisabled = false;\n                },\n                error: err => {\n                  alert(`There was an error: ${err.message}`);\n                  this.isDisabled = false;\n                }\n              })\n            }            \n          }.bind(this));\n        }\n      );\n    } else {\n      this.checkoutFormGroup.markAllAsTouched();\n      return;\n    }\n\n  }\n\n  resetCart() {\n    // reset cart data\n    this.cartService.cartItems = [];\n    this.cartService.totalPrice.next(0);\n    this.cartService.totalQuantity.next(0);\n    this.cartService.persistCartItems();\n    \n    // reset the form\n    this.checkoutFormGroup.reset();\n\n    // navigate back to the products page\n    this.router.navigateByUrl(\"/products\");\n  }\n\n  /*\n  handleMonthsAndYears() {\n\n    const creditCardFormGroup = this.checkoutFormGroup.get('creditCard');\n\n    const currentYear: number = new Date().getFullYear();\n    const selectedYear: number = Number(creditCardFormGroup.value.expirationYear);\n\n    // if the current year equals the selected year, then start with the current month\n\n    let startMonth: number;\n\n    if (currentYear === selectedYear) {\n      startMonth = new Date().getMonth() + 1;\n    }\n    else {\n      startMonth = 1;\n    }\n\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\n      data => {\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\n        this.creditCardMonths = data;\n      }\n    );\n  }\n  */\n\n  getStates(formGroupName: string) {\n\n    const formGroup = this.checkoutFormGroup.get(formGroupName);\n\n    const countryCode = formGroup.value.country.code;\n    const countryName = formGroup.value.country.name;\n\n    console.log(`${formGroupName} country code: ${countryCode}`);\n    console.log(`${formGroupName} country name: ${countryName}`);\n\n    this.luv2ShopFormService.getStates(countryCode).subscribe(\n      data => {\n\n        if (formGroupName === 'shippingAddress') {\n          this.shippingAddressStates = data; \n        }\n        else {\n          this.billingAddressStates = data;\n        }\n\n        // select first item by default\n        formGroup.get('state').setValue(data[0]);\n      }\n    );\n  }\n}\n","<div class=\"main-content page-m\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n\n            <form [formGroup]=\"checkoutFormGroup\" (ngSubmit)=\"onSubmit()\">\n\n                <!-- customer form group -->\n                <div formGroupName=\"customer\" class=\"form-area\">\n                    <h3>Customer</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>First Name</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"firstName\" type=\"text\">\n\n                                <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"firstName.errors.required || firstName.errors.notOnlyWhitespace\">\n                                        First Name is required\n                                    </div>\n\n                                    <div *ngIf=\"firstName.errors.minlength\">\n                                        First Name must be at least 2 characters long\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Last Name</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"lastName\" type=\"text\">\n\n                                <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"lastName.errors.required || lastName.errors.notOnlyWhitespace\">\n                                        Last Name is required\n                                    </div>\n\n                                    <div *ngIf=\"lastName.errors.minlength\">\n                                        Last Name must be at least 2 characters long\n                                    </div>\n\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Email</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"email\" type=\"text\">\n\n                                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"email.errors.required\">\n                                        Email is required\n                                    </div>\n\n                                    <div *ngIf=\"email.errors.pattern\">\n                                        Email must be a valid email address format\n                                    </div>\n\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- shipping Address -->\n                <div formGroupName=\"shippingAddress\" class=\"form-area\">\n                    <h3>Shipping Address</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Country</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"country\" (change)=\"getStates('shippingAddress')\">\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                                        {{ country.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"shippingAddressCountry.invalid && (shippingAddressCountry.dirty || shippingAddressCountry.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressCountry.errors.required\">\n                                        Country is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Street</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"street\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressStreet.invalid && (shippingAddressStreet.dirty || shippingAddressStreet.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressStreet.errors.required || shippingAddressStreet.errors.notOnlyWhitespace\">\n                                        Street is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressStreet.errors.minlength\">\n                                        Street must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>City</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"city\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressCity.invalid && (shippingAddressCity.dirty || shippingAddressCity.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressCity.errors.required || shippingAddressCity.errors.notOnlyWhitespace\">\n                                        City is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressCity.errors.minlength\">\n                                        City must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>State</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"state\">\n                                    <option *ngFor=\"let state of shippingAddressStates\" [ngValue]=\"state\">\n                                        {{ state.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"shippingAddressState.invalid && (shippingAddressState.dirty || shippingAddressState.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressState.errors.required\">\n                                        State is required\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Zip Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"zipCode\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressZipCode.invalid && (shippingAddressZipCode.dirty || shippingAddressZipCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressZipCode.errors.required || shippingAddressZipCode.errors.notOnlyWhitespace\">\n                                        Zip code is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressZipCode.errors.minlength\">\n                                        Zip code must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- Add check box to copy shipping to billing -->\n                <div class=\"input-space\">\n                    <label class=\"au-checkbox\">\n                        <input type=\"checkbox\" (change)=\"copyShippingAddressToBillingAddress($event)\">\n                        <span class=\"au-checkmark\"></span>Billing Address same as Shipping Address\n                    </label>\n                </div>\n\n\n                <!-- Billing Address -->\n                <div formGroupName=\"billingAddress\" class=\"form-area\">\n                    <h3>Billing Address</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Country</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"country\" (change)=\"getStates('billingAddress')\">\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                                        {{ country.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"billingAddressCountry.invalid && (billingAddressCountry.dirty || billingAddressCountry.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressCountry.errors.required\">\n                                        Country is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Street</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"street\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressStreet.invalid && (billingAddressStreet.dirty || billingAddressStreet.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressStreet.errors.required || billingAddressStreet.errors.notOnlyWhitespace\">\n                                        Street is required\n                                    </div>\n                                    <div *ngIf=\"billingAddressStreet.errors.minlength\">\n                                        Street must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>City</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"city\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressCity.invalid && (billingAddressCity.dirty || billingAddressCity.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressCity.errors.required || billingAddressCity.errors.notOnlyWhitespace\">\n                                        City is required\n                                    </div>\n                                    <div *ngIf=\"billingAddressCity.errors.minlength\">\n                                        City must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>State</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"state\">\n                                    <option *ngFor=\"let state of billingAddressStates\" [ngValue]=\"state\">\n                                        {{ state.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"billingAddressState.invalid && (billingAddressState.dirty || billingAddressState.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressState.errors.required\">\n                                        State is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Zip Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"zipCode\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressZipCode.invalid && (billingAddressZipCode.dirty || billingAddressZipCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressZipCode.errors.required || billingAddressZipCode.errors.notOnlyWhitespace\">\n                                        Zip code is required\n                                    </div>\n\n                                    <div *ngIf=\"billingAddressZipCode.errors.minlength\">\n                                        Zip code must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                \n                <!-- Stripe Elements Credit Card Section -->\n                <div formGroupName=\"creditCard\" class=\"form-area\">\n\n                    <h3>Credit or Debit Card</h3>\n\n                    <div id=\"card-element\">\n                        <!-- a Stripe element will be inserted here -->\n                    </div>\n\n                    <!-- Used to display form errors -->\n                    <div id=\"card-errors\" class=\"displayError.textContent!=='': 'alert alert-danger mt-1'\"></div>\n\n                </div>\n\n                <!-- Order details -->\n                <div class=\"form-area\">\n                    <h3>Review Your Order</h3>\n\n                    <p>Total Quantity: {{ totalQuantity }}</p>\n                    <p>Shipping: FREE</p>\n                    <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\n                </div>\n\n                <!-- submit button-->\n                <div class=\"text-center\">\n                    <button type=\"submit\" class=\"btn btn-info\" [disabled]=\"isDisabled\">Purchase</button>\n                </div>\n\n            </form>\n\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  doSearch(value: string) {\n    console.log(`value=${value}`);\n    this.router.navigateByUrl(`/search/${value}`);\n  }\n}\n","<div class=\"form-header\">\n\n    <input #myInput type=\"text\" \n           placeholder=\"Search for products ...\"\n           class=\"au-input au-input-xl\"\n           (keyup.enter)=\"doSearch(myInput.value)\"  />\n\n    <button (click)=\"doSearch(myInput.value)\" class=\"au-btn-submit\">\n        Search\n    </button>\n\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Purchase } from '../common/purchase';\nimport { PaymentInfo } from '../common/payment-info';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckoutService {\n\n  private purchaseUrl = environment.luv2shopApiUrl + '/checkout/purchase';\n\n  private paymentIntentUrl = environment.luv2shopApiUrl + '/checkout/payment-intent';\n  \n  constructor(private httpClient: HttpClient) { }\n\n  placeOrder(purchase: Purchase): Observable<any> {\n    return this.httpClient.post<Purchase>(this.purchaseUrl, purchase);    \n  }\n\n  createPaymentIntent(paymentInfo: PaymentInfo): Observable<any> {\n    return this.httpClient.post<PaymentInfo>(this.paymentIntentUrl, paymentInfo);\n  }\n  \n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-ecommerce';\n}\n","<div class=\"page-wrapper\">\n\n  <!-- MENU SIDEBAR-->\n  <aside class=\"menu-sidebar d-none d-lg-block\">\n    <div class=\"logo\">\n      <a routerLink=\"/products\">\n        <img src=\"assets/images/logo.png\" alt=\"luv2shop\" class=\"img-responsive\">\n      </a>\n    </div>\n\n    <app-product-category-menu></app-product-category-menu>\n\n  </aside>\n  <!-- END MENU SIDEBAR-->\n\n  <div class=\"page-container\">\n    <!-- HEADER DESKTOP-->\n    <header class=\"header-desktop\">\n      <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n          <div class=\"header-wrap\">\n\n            <app-search></app-search>\n\n            <app-login-status></app-login-status>\n \n            <app-cart-status></app-cart-status>\n\n          </div>\n          <div class=\"account-wrap\"></div>\n        </div>\n      </div>\n    </header>\n    <!-- END HEADER DESKTOP-->\n\n    <!-- MAIN CONTENT-->\n    <router-outlet></router-outlet>\n\n  </div>\n</div>\n\n<!-- ENDS PAGE CONTAINER -->\n\n<footer>\n  <ul>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Contact Us</a></li>\n    <li><a href=\"#\">Help</a></li>\n  </ul>\n</footer>","export class Product {\n    id: string;\n    sku: string;\n    name: string;\n    description: string;\n    unitPrice: number;\n    imageUrl: string;\n    active: boolean;\n    unitsInStock: number;\n    dateCreated: Date;\n    lastUpdate: Date;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { OktaAuthService } from '@okta/okta-angular';\nimport * as OktaSignIn from '@okta/okta-signin-widget';\n\nimport myAppConfig from '../../config/my-app-config';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  oktaSignin: any;\n\n  constructor(private oktaAuthService: OktaAuthService) { \n\n    this.oktaSignin = new OktaSignIn({\n      logo: 'assets/images/logo.png',\n      features: {\n        registration: true\n      },\n      baseUrl: myAppConfig.oidc.issuer.split('/oauth2')[0],\n      clientId: myAppConfig.oidc.clientId,\n      redirectUri: myAppConfig.oidc.redirectUri,\n      authParams: {\n        pkce: true,\n        issuer: myAppConfig.oidc.issuer,\n        scopes: myAppConfig.oidc.scopes\n      }\n    });\n\n  }\n\n  ngOnInit(): void {\n    this.oktaSignin.remove();\n\n    this.oktaSignin.renderEl({\n      el: '#okta-sign-in-widget'}, // this name should be same as div tag id in login.component.html\n      (response) => {\n        if (response.status === 'SUCCESS') {\n          this.oktaAuthService.signInWithRedirect();\n        }\n      },\n      (error) => {\n        throw error;\n      }\n    );\n  }\n\n}\n","<!-- Container to inject the Okta Sign-In Widget -->\n<div class=\"pt=5\">\n    <div id=\"okta-sign-in-widget\" class=\"pt-5\"></div>\n</div>\n","import { CartItem } from './cart-item';\n\nexport class OrderItem {\n    imageUrl: string;\n    unitPrice: number;\n    quantity: number;\n    productId: string;\n\n    constructor(cartItem: CartItem) {\n        this.imageUrl = cartItem.imageUrl;\n        this.quantity = cartItem.quantity;\n        this.unitPrice = cartItem.unitPrice;\n        this.productId = cartItem.id;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-status',\n  templateUrl: './cart-status.component.html',\n  styleUrls: ['./cart-status.component.css']\n})\nexport class CartStatusComponent implements OnInit {\n\n  totalPrice: number = 0.00;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.updateCartStatus();\n  }\n\n  updateCartStatus() {\n\n    // subscribe to the cart totalPrice\n    this.cartService.totalPrice.subscribe(\n      data => this.totalPrice = data\n    );\n\n    // subscribe to the cart totalQuantity\n    this.cartService.totalQuantity.subscribe(\n      data => this.totalQuantity = data\n    );\n\n  }\n\n}\n","<div class=\"cart-area d-n\">\n    <a routerLink=\"/cart-details\">\n        <div class=\"total\">{{ totalPrice | currency: 'USD' }}\n            <span>{{ totalQuantity }}</span> \n        </div> \n        <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>\n    </a>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ProductService } from './services/product.service';\n\nimport { Routes, RouterModule, Router} from '@angular/router';\nimport { ProductCategoryMenuComponent } from './components/product-category-menu/product-category-menu.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { ProductDetailsComponent } from './components/product-details/product-details.component';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartStatusComponent } from './components/cart-status/cart-status.component';\nimport { CartDetailsComponent } from './components/cart-details/cart-details.component';\nimport { CheckoutComponent } from './components/checkout/checkout.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './components/login/login.component';\nimport { LoginStatusComponent } from './components/login-status/login-status.component';\n\nimport {\n  OKTA_CONFIG,\n  OktaAuthModule,\n  OktaCallbackComponent,\n  OktaAuthGuard\n} from '@okta/okta-angular';\n\nimport myAppConfig from './config/my-app-config';\nimport { MembersPageComponent } from './components/members-page/members-page.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { AuthInterceptorService } from './services/auth-interceptor.service';\n\nconst oktaConfig = Object.assign({\n  onAuthRequired: (oktaAuth, injector) => {\n    const router = injector.get(Router);\n\n    // Redirect the user to your custom login page\n    router.navigate(['/login']);\n  }\n}, myAppConfig.oidc);\n\nconst routes: Routes = [\n  {path: 'order-history', component: OrderHistoryComponent, canActivate: [ OktaAuthGuard ]},\n  {path: 'members', component: MembersPageComponent, canActivate: [ OktaAuthGuard ]},\n\n  {path: 'login/callback', component: OktaCallbackComponent},\n  {path: 'login', component: LoginComponent},\n\n  {path: 'checkout', component: CheckoutComponent},\n  {path: 'cart-details', component: CartDetailsComponent},\n  {path: 'products/:id', component: ProductDetailsComponent},\n  {path: 'search/:keyword', component: ProductListComponent},\n  {path: 'category/:id', component: ProductListComponent},\n  {path: 'category', component: ProductListComponent},\n  {path: 'products', component: ProductListComponent},\n  {path: '', redirectTo: '/products', pathMatch: 'full'},\n  {path: '**', redirectTo: '/products', pathMatch: 'full'}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProductListComponent,\n    ProductCategoryMenuComponent,\n    SearchComponent,\n    ProductDetailsComponent,\n    CartStatusComponent,\n    CartDetailsComponent,\n    CheckoutComponent,\n    LoginComponent,\n    LoginStatusComponent,\n    MembersPageComponent,\n    OrderHistoryComponent\n  ],\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserModule,\n    HttpClientModule,\n    NgbModule,\n    ReactiveFormsModule,\n    OktaAuthModule\n  ],\n  providers: [ProductService, { provide: OKTA_CONFIG, useValue: oktaConfig },\n              {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ProductCategory } from 'src/app/common/product-category';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-category-menu',\n  templateUrl: './product-category-menu.component.html',\n  styleUrls: ['./product-category-menu.component.css']\n})\nexport class ProductCategoryMenuComponent implements OnInit {\n\n  productCategories: ProductCategory[];\n  \n  constructor(private productService: ProductService) { }\n\n  ngOnInit() {\n    this.listProductCategories();\n  }\n\n  listProductCategories() {\n\n    this.productService.getProductCategories().subscribe(\n      data => {\n        console.log('Product Categories=' + JSON.stringify(data));\n        this.productCategories = data;\n      }\n    );\n  }\n\n}\n","<div class=\"menu-sidebar-content js-scrollbar1\">\n    <nav class=\"navbar-sidebar\">\n        <ul class=\"list-unstyled navbar-list\">\n\n            <li *ngFor=\"let tempProductCategory of productCategories\">\n\n                <a routerLink=\"/category/{{ tempProductCategory.id }}\" routerLinkActive=\"active-link\">\n                    {{ tempProductCategory.categoryName }}\n                </a>\n\n            </li>\n        \n        </ul>\n    </nav>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Product } from 'src/app/common/product';\nimport { ProductService } from 'src/app/services/product.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CartItem } from 'src/app/common/cart-item';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n\n  product: Product = new Product();\n\n  constructor(private productService: ProductService,\n              private cartService: CartService,\n              private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.handleProductDetails();\n    })\n  }\n\n  handleProductDetails() {\n\n    // get the \"id\" param string. convert string to a number using the \"+\" symbol\n    const theProductId: number = +this.route.snapshot.paramMap.get('id');\n\n    this.productService.getProduct(theProductId).subscribe(\n      data => {\n        this.product = data;\n      }\n    )\n  }\n\n  addToCart() {\n\n    console.log(`Adding to cart: ${this.product.name}, ${this.product.unitPrice}`);\n    const theCartItem = new CartItem(this.product);\n    this.cartService.addToCart(theCartItem);\n    \n  }\n\n}\n","<div class=\"detail-section\">\n    <div class=\"container-fluid\">\n\n        <img src=\"{{ product.imageUrl }}\" class=\"detail-img\">\n\n        <h3>{{ product.name }}</h3>\n        <div class=\"price\">{{ product.unitPrice | currency:'USD' }}</div>\n        <button (click)=\"addToCart()\" class=\"btn btn-primary btn-sm\">Add to cart</button>\n\n        <hr>\n        <h4>Description</h4>\n        <p>{{ product.description }}</p>\n\n        <a routerLink=\"/products\" class=\"mt-5\">Back to Product List</a>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from 'src/app/services/product.service';\nimport { Product } from 'src/app/common/product';\nimport { ActivatedRoute } from '@angular/router';\nimport { timeoutWith } from 'rxjs/operators';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list-grid.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n\n  products: Product[] = [];\n  currentCategoryId: number = 1;\n  previousCategoryId: number = 1;\n  searchMode: boolean = false;\n\n  // new properties for pagination\n  thePageNumber: number = 1;\n  thePageSize: number = 5;\n  theTotalElements: number = 0;\n\n  previousKeyword: string = null;\n\n  constructor(private productService: ProductService,\n              private cartService: CartService,\n              private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n  }\n\n  listProducts() {\n\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\n\n    if (this.searchMode) {\n      this.handleSearchProducts();\n    }\n    else {\n      this.handleListProducts();\n    }\n\n  }\n\n  handleSearchProducts() {\n\n    const theKeyword: string = this.route.snapshot.paramMap.get('keyword');\n\n    // if we have a different keyword than previous\n    // then set thePageNumber to 1\n\n    if (this.previousKeyword != theKeyword) {\n      this.thePageNumber = 1;\n    }\n\n    this.previousKeyword = theKeyword;\n\n    console.log(`keyword=${theKeyword}, thePageNumber=${this.thePageNumber}`);\n\n    // now search for the products using keyword\n    this.productService.searchProductsPaginate(this.thePageNumber - 1,\n                                               this.thePageSize,\n                                               theKeyword).subscribe(this.processResult());\n                                               \n  }\n\n  handleListProducts() {\n\n    // check if \"id\" parameter is available\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id');\n\n    if (hasCategoryId) {\n      // get the \"id\" param string. convert string to a number using the \"+\" symbol\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\n    }\n    else {\n      // not category id available ... default to category id 1\n      this.currentCategoryId = 1;\n    }\n\n    //\n    // Check if we have a different category than previous\n    // Note: Angular will reuse a component if it is currently being viewed\n    //\n\n    // if we have a different category id than previous\n    // then set thePageNumber back to 1\n    if (this.previousCategoryId != this.currentCategoryId) {\n      this.thePageNumber = 1;\n    }\n\n    this.previousCategoryId = this.currentCategoryId;\n\n    console.log(`currentCategoryId=${this.currentCategoryId}, thePageNumber=${this.thePageNumber}`);\n\n    // now get the products for the given category id\n    this.productService.getProductListPaginate(this.thePageNumber - 1,\n                                               this.thePageSize,\n                                               this.currentCategoryId)\n                                               .subscribe(this.processResult());\n  }\n\n  processResult() {\n    return data => {\n      this.products = data._embedded.products;\n      this.thePageNumber = data.page.number + 1;\n      this.thePageSize = data.page.size;\n      this.theTotalElements = data.page.totalElements;\n    };\n  }\n\n  updatePageSize(pageSize: number) {\n    this.thePageSize = pageSize;\n    this.thePageNumber = 1;\n    this.listProducts();\n  }\n\n  addToCart(theProduct: Product) {\n    \n    console.log(`Adding to cart: ${theProduct.name}, ${theProduct.unitPrice}`);\n\n    // TODO ... do the real work\n    const theCartItem = new CartItem(theProduct);\n\n    this.cartService.addToCart(theCartItem);\n  }\n\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n\n                <!-- loop over the collection of products -->\n                <div *ngFor=\"let tempProduct of products\" class=\"col-md-3\">\n\n                    <div class=\"product-box\">\n\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\n                            <img src=\"{{ tempProduct.imageUrl }}\" class=\"img-responsive\">\n                        </a>\n\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\n                            <h1>{{ tempProduct.name }}</h1>\n                        </a>\n                        \n                        <div class=\"price\">{{ tempProduct.unitPrice | currency:'USD' }}</div>\n                        <button (click)=\"addToCart(tempProduct)\" class=\"btn btn-primary btn-sm\">Add to cart</button>\n                    </div>\n\n                </div>\n\n                <!-- if products empty then display a message-->\n                <div *ngIf=\"products?.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                    No products found.\n                </div>\n\n            </div>\n\n            <!-- begin footer -->\n            <div class=\"footer-pagination\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\"></div>\n\n                    <div class=\"col-md-6\">\n                        <div class=\"row\">\n                            <div class=\"col-md-9\" style=\"padding-left: 30%\">\n                            \n                                <ngb-pagination [(page)]=\"thePageNumber\"\n                                                [pageSize]=\"thePageSize\"\n                                                [collectionSize]=\"theTotalElements\"\n                                                [maxSize]=\"5\"\n                                                [boundaryLinks]=\"true\"\n                                                (pageChange)=\"listProducts()\">\n\n                                </ngb-pagination>\n\n                            </div>\n\n                            <div class=\"col-md-3 mt-2\" style=\"text-align: right;\">\n                                <span class=\"mr-2\">Page Size</span>\n\n                                <select (change)=\"updatePageSize($event.target.value)\">\n                                    <option>2</option>\n                                    <option selected=\"true\">5</option>\n                                    <option>10</option>\n                                    <option>20</option>\n                                    <option>50</option>\n                                </select>\n                            </div>\n\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n            <!-- end footer -->\n\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { CartItem } from '../common/cart-item';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  cartItems: CartItem[] = [];\n\n  totalPrice: Subject<number> = new BehaviorSubject<number>(0);\n  totalQuantity: Subject<number> = new BehaviorSubject<number>(0);\n\n  storage: Storage = sessionStorage;\n  // storage: Storage = localStorage;\n\n  constructor() { \n\n      // read data from storage\n      let data = JSON.parse(this.storage.getItem('cartItems'));\n\n      if (data != null) {\n        this.cartItems = data;\n        \n        // compute totals based on the data that is read from storage\n        this.computeCartTotals();\n      }\n\n  }\n\n  addToCart(theCartItem: CartItem) {\n\n    // check if we already have the item in our cart\n    let alreadyExistsInCart: boolean = false;\n    let existingCartItem: CartItem = undefined;\n\n    if (this.cartItems.length > 0) {\n      // find the item in the cart based on item id\n\n      existingCartItem = this.cartItems.find( tempCartItem => tempCartItem.id === theCartItem.id );\n\n      // check if we found it\n      alreadyExistsInCart = (existingCartItem != undefined);\n    }\n\n    if (alreadyExistsInCart) {\n      // increment the quantity\n      existingCartItem.quantity++;\n    }\n    else {\n      // just add the item to the array\n      this.cartItems.push(theCartItem);\n    }\n\n    // compute cart total price and total quantity\n    this.computeCartTotals();\n  }\n\n  computeCartTotals() {\n\n    let totalPriceValue: number = 0;\n    let totalQuantityValue: number = 0;\n\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n\n    // publish the new values ... all subscribers will receive the new data\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n\n    // log cart data just for debugging purposes\n    this.logCartData(totalPriceValue, totalQuantityValue);\n\n    // persist cart data\n    this.persistCartItems();\n  }\n\n  persistCartItems() {\n    this.storage.setItem('cartItems', JSON.stringify(this.cartItems));\n  }\n\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\n\n    console.log('Contents of the cart');\n    for (let tempCartItem of this.cartItems) {\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n      console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\n    }\n\n    console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n    console.log('----');\n  }\n\n  decrementQuantity(theCartItem: CartItem) {\n\n    theCartItem.quantity--;\n\n    if (theCartItem.quantity === 0) {\n      this.remove(theCartItem);\n    }\n    else {\n      this.computeCartTotals();\n    }\n  }\n\n  remove(theCartItem: CartItem) {\n\n    // get index of item in the array\n    const itemIndex = this.cartItems.findIndex( tempCartItem => tempCartItem.id === theCartItem.id );\n\n    // if found, remove the item from the array at the given index\n    if (itemIndex > -1) {\n      this.cartItems.splice(itemIndex, 1);\n\n      this.computeCartTotals();\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { OrderHistory } from '../../common/order-history';\nimport { OrderHistoryService } from '../../services/order-history.service';\n\n@Component({\n  selector: 'app-order-history',\n  templateUrl: './order-history.component.html',\n  styleUrls: ['./order-history.component.css']\n})\nexport class OrderHistoryComponent implements OnInit {\n\n  orderHistoryList: OrderHistory[] = [];\n  storage: Storage = sessionStorage;\n\n  constructor(private orderHistoryService: OrderHistoryService) { }\n\n  ngOnInit(): void {\n    this.handleOrderHistory();\n  }\n\n  handleOrderHistory() {\n\n    // read the user's email address from browser storage\n    const theEmail = JSON.parse(this.storage.getItem('userEmail'));\n\n    // retrieve data from the service\n    this.orderHistoryService.getOrderHistory(theEmail).subscribe(\n      data => {\n        this.orderHistoryList = data._embedded.orders;\n      }\n    );\n  }\n\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n            <h3>Your Orders</h3>\n\n            <div *ngIf=\"orderHistoryList.length > 0\">\n                <table class=\"table table-bordered\">\n                    <tr>\n                        <th width=\"20%\">Order Tracking Number</th>\n                        <th width=\"10%\">Total Price</th>\n                        <th width=\"10%\">Total Quantity</th>\n                        <th width=\"10%\">Date</th>\n                    </tr>\n\n                    <tr *ngFor=\"let tempOrderHistory of orderHistoryList\">\n                        <td>\n                            {{ tempOrderHistory.orderTrackingNumber }}\n                        </td>\n                        <td>\n                            {{ tempOrderHistory.totalPrice | currency: 'USD' }}\n                        </td>\n                        <td>\n                            {{ tempOrderHistory.totalQuantity }}\n                        </td>\n                        <td>\n                            {{ tempOrderHistory.dateCreated | date: 'medium' }}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n\n            <!-- if order history is empty then display a message -->\n            <div *ngIf=\"orderHistoryList.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                No orders found.\n            </div>\n\n        </div>\n    </div>\n</div>","export default {\n\n    oidc: {\n        clientId: '0oaahshyjkfSAAlt05d7',\n        issuer: 'https://dev-78760789.okta.com/oauth2/default',\n        redirectUri: 'https://localhost:4200/login/callback',\n        scopes: ['openid', 'profile', 'email']\n    }\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { OktaAuthService } from '@okta/okta-angular';\nimport { from, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(private oktaAuth: OktaAuthService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return from(this.handleAccess(request, next));\n  }\n\n  private async handleAccess(request: HttpRequest<any>, next: HttpHandler): Promise<HttpEvent<any>> { \n\n    // Only add an access token for secured endpoints\n    const theEndpoint = environment.luv2shopApiUrl + '/orders';\n    const securedEndpoints = [theEndpoint];\n\n    if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n\n      // get access token\n      const accessToken = await this.oktaAuth.getAccessToken();\n\n      // clone the request and add new header with access token\n      request = request.clone({\n        setHeaders: {\n          Authorization: 'Bearer ' + accessToken\n        }\n      });\n\n    }\n\n    return next.handle(request).toPromise();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { OktaAuthService } from '@okta/okta-angular';\n\n@Component({\n  selector: 'app-login-status',\n  templateUrl: './login-status.component.html',\n  styleUrls: ['./login-status.component.css']\n})\nexport class LoginStatusComponent implements OnInit {\n\n  isAuthenticated: boolean = false;\n  userFullName: string;\n\n  storage: Storage = sessionStorage;\n\n  constructor(private oktaAuthService: OktaAuthService) { }\n\n  ngOnInit(): void {\n\n    // Subscribe to authentication state changes\n    this.oktaAuthService.$authenticationState.subscribe(\n      (result) => {\n        this.isAuthenticated = result;\n        this.getUserDetails();\n      }\n    );\n    \n  }\n\n  getUserDetails() {\n    if (this.isAuthenticated) {\n\n      // Fetch the logged in user details (user's claims)\n      //\n      // user full name is exposed as a property name\n      this.oktaAuthService.getUser().then(\n        (res) => {\n          this.userFullName = res.name;\n\n          // retrieve the user's email from authentication response\n          const theEmail = res.email;\n\n          // now store the email in browser storage\n          this.storage.setItem('userEmail', JSON.stringify(theEmail));\n        }\n      );\n    }\n  }\n\n  logout() {\n    // Terminates the session with Okta and removes current tokens.\n    this.oktaAuthService.signOut();\n  }\n}\n","<div class=\"login-status-header\">\n\n    <div *ngIf=\"isAuthenticated && userFullName\" class=\"login-status-user-info\">\n        Welcome back {{ userFullName }}!\n    </div>\n\n    <button *ngIf=\"!isAuthenticated\" routerLink=\"/login\" class=\"security-btn\">Login</button>\n\n    <button *ngIf=\"isAuthenticated\" (click)=\"logout()\" class=\"security-btn\">Logout</button>\n\n    <button *ngIf=\"isAuthenticated\" routerLink=\"/members\" class=\"security-btn ml-1\">Member</button>\n\n    <button *ngIf=\"isAuthenticated\" routerLink=\"/order-history\" class=\"security-btn ml-1\">Orders</button>\n\n</div>","import { FormControl, ValidationErrors } from '@angular/forms';\n\nexport class Luv2ShopValidators {\n\n    // whitespace validation\n    static notOnlyWhitespace(control: FormControl) : ValidationErrors {\n        \n        // check if string only contains whitespace\n        if ((control.value != null) && (control.value.trim().length === 0)) {\n\n            // invalid, return error object\n            return { 'notOnlyWhitespace': true };\n        }\n        else {\n            // valid, return null\n            return null;\n        }\n    }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}