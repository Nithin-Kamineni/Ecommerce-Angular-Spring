{"version":3,"sources":["webpack:///src/app/components/cart-details/cart-details.component.ts","webpack:///src/app/components/cart-details/cart-details.component.html","webpack:///src/app/common/order.ts","webpack:///src/environments/environment.ts","webpack:///src/app/common/purchase.ts","webpack:///src/app/components/members-page/members-page.component.ts","webpack:///src/app/components/members-page/members-page.component.html","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/luv2-shop-form.service.ts","webpack:///src/app/common/payment-info.ts","webpack:///src/app/services/order-history.service.ts","webpack:///src/app/common/cart-item.ts","webpack:///src/app/components/checkout/checkout.component.ts","webpack:///src/app/components/checkout/checkout.component.html","webpack:///src/app/components/search/search.component.ts","webpack:///src/app/components/search/search.component.html","webpack:///src/app/services/checkout.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/common/product.ts","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/common/order-item.ts","webpack:///src/app/components/cart-status/cart-status.component.ts","webpack:///src/app/components/cart-status/cart-status.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/product-category-menu/product-category-menu.component.ts","webpack:///src/app/components/product-category-menu/product-category-menu.component.html","webpack:///src/app/components/product-details/product-details.component.ts","webpack:///src/app/components/product-details/product-details.component.html","webpack:///src/app/components/product-list/product-list.component.ts","webpack:///src/app/components/product-list/product-list-grid.component.html","webpack:///src/app/services/cart.service.ts","webpack:///src/app/components/order-history/order-history.component.ts","webpack:///src/app/components/order-history/order-history.component.html","webpack:///src/app/config/my-app-config.ts","webpack:///src/app/services/auth-interceptor.service.ts","webpack:///src/app/components/login-status/login-status.component.ts","webpack:///src/app/components/login-status/login-status.component.html","webpack:///src/app/validators/luv2-shop-validators.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["CartDetailsComponent","cartService","cartItems","totalPrice","totalQuantity","listCartDetails","subscribe","data","computeCartTotals","theCartItem","addToCart","decrementQuantity","remove","selector","templateUrl","styleUrls","Order","environment","production","luv2shopApiUrl","stripePublishableKey","Purchase","MembersPageComponent","ProductService","httpClient","baseUrl","categoryUrl","theProductId","productUrl","get","thePage","thePageSize","theCategoryId","searchUrl","console","log","getProducts","theKeyword","pipe","response","_embedded","products","productCategory","providedIn","Luv2ShopFormService","countriesUrl","statesUrl","countries","theCountryCode","searchStatesUrl","states","startMonth","theMonth","push","startYear","Date","getFullYear","endYear","theYear","PaymentInfo","OrderHistoryService","orderUrl","theEmail","orderHistoryUrl","CartItem","product","id","name","imageUrl","unitPrice","quantity","CheckoutComponent","formBuilder","luv2ShopFormService","checkoutService","router","creditCardYears","creditCardMonths","shippingAddressStates","billingAddressStates","storage","sessionStorage","stripe","Stripe","paymentInfo","displayError","isDisabled","setupStripePaymentForm","reviewCartDetails","JSON","parse","getItem","checkoutFormGroup","group","customer","firstName","required","minLength","notOnlyWhitespace","lastName","email","pattern","shippingAddress","street","city","state","country","zipCode","billingAddress","creditCard","getCountries","stringify","elements","cardElement","create","hidePostalCode","mount","on","event","document","getElementById","complete","textContent","error","message","target","checked","controls","setValue","value","reset","invalid","markAllAsTouched","order","orderItems","map","tempCartItem","purchase","shippingState","shippingCountry","billingState","billingCountry","amount","Math","round","currency","receiptEmail","createPaymentIntent","paymentIntentResponse","confirmCardPayment","client_secret","payment_method","card","billing_details","address","line1","postal_code","billingAddressCountry","code","handleActions","then","result","alert","placeOrder","next","orderTrackingNumber","resetCart","err","bind","persistCartItems","navigateByUrl","formGroupName","formGroup","countryCode","countryName","getStates","onSubmit","copyShippingAddressToBillingAddress","SearchComponent","doSearch","CheckoutService","purchaseUrl","paymentIntentUrl","post","AppComponent","title","Product","LoginComponent","oktaAuthService","oktaSignin","logo","features","registration","oidc","issuer","split","clientId","redirectUri","authParams","pkce","scopes","renderEl","el","status","signInWithRedirect","OrderItem","cartItem","productId","CartStatusComponent","updateCartStatus","oktaConfig","Object","assign","onAuthRequired","oktaAuth","injector","navigate","routes","path","component","canActivate","redirectTo","pathMatch","AppModule","provide","useValue","useClass","multi","forRoot","declarations","imports","providers","bootstrap","ProductCategoryMenuComponent","productService","listProductCategories","getProductCategories","productCategories","ProductDetailsComponent","route","paramMap","handleProductDetails","snapshot","getProduct","ProductListComponent","currentCategoryId","previousCategoryId","searchMode","thePageNumber","theTotalElements","previousKeyword","listProducts","has","handleSearchProducts","handleListProducts","searchProductsPaginate","processResult","hasCategoryId","getProductListPaginate","page","number","size","totalElements","pageSize","theProduct","updatePageSize","CartService","alreadyExistsInCart","existingCartItem","undefined","length","find","totalPriceValue","totalQuantityValue","currentCartItem","logCartData","setItem","subTotalPrice","toFixed","itemIndex","findIndex","splice","OrderHistoryComponent","orderHistoryService","orderHistoryList","handleOrderHistory","getOrderHistory","orders","AuthInterceptorService","request","handleAccess","theEndpoint","securedEndpoints","some","url","urlWithParams","includes","getAccessToken","accessToken","clone","setHeaders","Authorization","handle","toPromise","LoginStatusComponent","isAuthenticated","$authenticationState","getUserDetails","getUser","res","userFullName","signOut","Luv2ShopValidators","control","trim","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-details',\n  templateUrl: './cart-details.component.html',\n  styleUrls: ['./cart-details.component.css']\n})\nexport class CartDetailsComponent implements OnInit {\n\n  cartItems: CartItem[] = [];\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.listCartDetails();\n  }\n\n  listCartDetails() {\n\n    // get a handle to the cart items\n    this.cartItems = this.cartService.cartItems;\n\n    // subscribe to the cart totalPrice\n    this.cartService.totalPrice.subscribe(\n      data => this.totalPrice = data\n    );\n\n    // subscribe to the cart totalQuantity\n    this.cartService.totalQuantity.subscribe( \n      data => this.totalQuantity = data\n    );\n\n    // compute cart total price and quantity\n    this.cartService.computeCartTotals();\n  }\n\n  incrementQuantity(theCartItem: CartItem) {\n    this.cartService.addToCart(theCartItem);\n  }\n\n  decrementQuantity(theCartItem: CartItem) {\n    this.cartService.decrementQuantity(theCartItem);\n  }\n\n  remove(theCartItem: CartItem) {\n    this.cartService.remove(theCartItem);\n  }\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n\n            <div *ngIf=\"cartItems.length > 0\">\n\n                <table class=\"table table-bordered\">\n                    <tr>\n                        <th width=\"20%\">Product Image</th>\n                        <th width=\"50%\">Product Detail</th>\n                        <th width=\"30%\"></th>\n                    </tr>\n\n                    <tr *ngFor=\"let tempCartItem of cartItems\">\n                        <td>\n                            <img src=\"{{ tempCartItem.imageUrl }}\" class=\"img-responsive\" width=\"150px\" />\n                        </td>\n                        <td>\n                            <p>{{ tempCartItem.name }}</p>\n                            <p>{{ tempCartItem.unitPrice | currency: 'USD' }}</p>\n                        </td>\n                        <td>\n                            <div class=\"items\">\n                                <label>Quantity:</label>\n\n                                <div class=\"row no-gutters\">\n                                    <div class=\"col\">\n                                        <button (click)=\"incrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\n                                            <i class=\"fas fa-plus\"></i>\n                                        </button>\n                                    </div>\n\n                                    <div class=\"col ml-4 mr-2\">\n                                        {{ tempCartItem.quantity }}\n                                    </div>\n\n                                    <div class=\"col\">\n                                        <button (click)=\"decrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\n                                            <i class=\"fas fa-minus\"></i>\n                                        </button>\n                                    </div>\n\n                                    <div class=\"col-8\"></div>\n                                </div>\n\n                            </div>\n\n                            <button (click)=\"remove(tempCartItem)\" class=\"btn btn-primary btn-sm mt-2\">Remove</button>\n\n                            <p class=\"mt-2\">Subtotal: {{ tempCartItem.quantity * tempCartItem.unitPrice | currency: 'USD' }}</p>\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colspan=\"2\"></td>\n                        <td style=\"font-weight: bold\">\n                            <p>Total Quantity: {{ totalQuantity }}</p>\n                            <p>Shipping: FREE</p>\n                            <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\n                            <a routerLink=\"/checkout\" class=\"btn btn-primary\">Checkout</a>\n                        </td>\n                    </tr>\n\n                </table>\n\n            </div>\n\n            <!-- if cart is empty then display a message -->\n            <div *ngIf=\"cartItems.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                Your shopping cart is empty. \n            </div>\n\n        </div>\n    </div>\n</div>\n","export class Order {\n    totalQuantity: number;\n    totalPrice: number;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  luv2shopApiUrl: \"https://localhost:8443/api\",\n  stripePublishableKey: \"pk_test_51N8oqULTz1e1vpakxAfq3mOwj7PNGsd2KLR3rzO269Zijz0voN7ER3liFQmxK2dNbiQIgGbHAMRfy9CKqM4yexV300ZEMofGIl\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Address } from './address';\nimport { Customer } from './customer';\nimport { Order } from './order';\nimport { OrderItem } from './order-item';\n\nexport class Purchase {\n    customer: Customer;\n    shippingAddress: Address;\n    billingAddress: Address;\n    order: Order;\n    orderItems: OrderItem[]; \n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-members-page',\n  templateUrl: './members-page.component.html',\n  styleUrls: ['./members-page.component.css']\n})\nexport class MembersPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"main-content\">\n\n    <div align=\"center\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n        <h3>Members Special</h3>\n\n        <p>Thank you for being a member.</p>\n\n        <p>Member discounts are coming soon!!</p>\n    </div>\n    \n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProductCategory } from '../common/product-category';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private baseUrl = environment.luv2shopApiUrl + '/products';\n\n  private categoryUrl = environment.luv2shopApiUrl + '/product-category';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProduct(theProductId: number): Observable<Product> {\n\n    // need to build URL based on product id\n    const productUrl = `${this.baseUrl}/${theProductId}`;\n\n    return this.httpClient.get<Product>(productUrl);\n  }\n\n  getProductListPaginate(thePage: number, \n                         thePageSize: number, \n                         theCategoryId: number): Observable<GetResponseProducts> {\n\n    // need to build URL based on category id, page and size \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`\n                    + `&page=${thePage}&size=${thePageSize}`;\n\n    console.log(`Getting products from - ${searchUrl}`);\n    \n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n\n  getProductList(theCategoryId: number): Observable<Product[]> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n\n    return this.getProducts(searchUrl);\n  }\n\n  searchProducts(theKeyword: string): Observable<Product[]> {\n\n    // need to build URL based on the keyword \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n\n    return this.getProducts(searchUrl);\n  }\n\n  searchProductsPaginate(thePage: number, \n                        thePageSize: number, \n                        theKeyword: string): Observable<GetResponseProducts> {\n\n    // need to build URL based on keyword, page and size \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`\n                    + `&page=${thePage}&size=${thePageSize}`;\n    \n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n\n\n  private getProducts(searchUrl: string): Observable<Product[]> {\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response => response._embedded.products));\n  }\n\n  getProductCategories(): Observable<ProductCategory[]> {\n\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\n      map(response => response._embedded.productCategory)\n    );\n  }\n\n}\n\ninterface GetResponseProducts {\n  _embedded: {\n    products: Product[];\n  },\n  page: {\n    size: number,\n    totalElements: number,\n    totalPages: number,\n    number: number\n  }\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: ProductCategory[];\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Country } from '../common/country';\nimport { map } from 'rxjs/operators';\nimport { State } from '../common/state';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Luv2ShopFormService {\n\n  private countriesUrl = environment.luv2shopApiUrl + '/countries';\n  private statesUrl = environment.luv2shopApiUrl + '/states';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getCountries(): Observable<Country[]> {\n\n    return this.httpClient.get<GetResponseCountries>(this.countriesUrl).pipe(\n      map(response => response._embedded.countries)\n    );\n  }\n\n  getStates(theCountryCode: string): Observable<State[]> {\n\n    // search url\n    const searchStatesUrl = `${this.statesUrl}/search/findByCountryCode?code=${theCountryCode}`;\n\n    return this.httpClient.get<GetResponseStates>(searchStatesUrl).pipe(\n      map(response => response._embedded.states)\n    );\n  }\n\n\n  getCreditCardMonths(startMonth: number): Observable<number[]> {\n\n    let data: number[] = [];\n    \n    // build an array for \"Month\" dropdown list\n    // - start at current month and loop until \n\n    for (let theMonth = startMonth; theMonth <= 12; theMonth++) {\n      data.push(theMonth);\n    }\n\n    return of(data);\n  }\n\n  getCreditCardYears(): Observable<number[]> {\n\n    let data: number[] = [];\n\n    // build an array for \"Year\" downlist list\n    // - start at current year and loop for next 10 years\n    \n    const startYear: number = new Date().getFullYear();\n    const endYear: number = startYear + 10;\n\n    for (let theYear = startYear; theYear <= endYear; theYear++) {\n      data.push(theYear);\n    }\n\n    return of(data);\n  }\n\n}\n\ninterface GetResponseCountries {\n  _embedded: {\n    countries: Country[];\n  }\n}\n\ninterface GetResponseStates {\n  _embedded: {\n    states: State[];\n  }\n}","export class PaymentInfo {\n    amount: number;\n    currency: string;\n    receiptEmail: string;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { OrderHistory } from '../common/order-history';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderHistoryService {\n\n  private orderUrl = environment.luv2shopApiUrl + '/orders';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getOrderHistory(theEmail: string): Observable<GetResponseOrderHistory> {\n\n    // need to build URL based on the customer email\n    const orderHistoryUrl = `${this.orderUrl}/search/findByCustomerEmailOrderByDateCreatedDesc?email=${theEmail}`;\n\n    return this.httpClient.get<GetResponseOrderHistory>(orderHistoryUrl);\n  }\n}\n\ninterface GetResponseOrderHistory {\n  _embedded: {\n    orders: OrderHistory[];\n  }\n}\n","import { Product } from './product';\n\nexport class CartItem {\n\n    id: string;\n    name: string;\n    imageUrl: string;\n    unitPrice: number;\n\n    quantity: number;\n\n    constructor(product: Product) {\n        this.id = product.id;\n        this.name = product.name;\n        this.imageUrl = product.imageUrl;\n        this.unitPrice = product.unitPrice;\n\n        this.quantity = 1;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Luv2ShopFormService } from 'src/app/services/luv2-shop-form.service';\nimport { Country } from 'src/app/common/country';\nimport { State } from 'src/app/common/state';\nimport { Luv2ShopValidators } from 'src/app/validators/luv2-shop-validators';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CheckoutService } from 'src/app/services/checkout.service';\nimport { Router } from '@angular/router';\nimport { Order } from 'src/app/common/order';\nimport { OrderItem } from 'src/app/common/order-item';\nimport { Purchase } from 'src/app/common/purchase';\nimport { environment } from 'src/environments/environment';\nimport { PaymentInfo } from 'src/app/common/payment-info';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n\n  checkoutFormGroup: FormGroup;\n\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n  \n  creditCardYears: number[] = [];\n  creditCardMonths: number[] = [];\n\n  countries: Country[] = [];\n\n  shippingAddressStates: State[] = [];\n  billingAddressStates: State[] = [];\n    \n  storage: Storage = sessionStorage;\n\n  // initialize Stripe API\n  stripe = Stripe(environment.stripePublishableKey);\n\n  paymentInfo: PaymentInfo = new PaymentInfo();\n  cardElement: any;\n  displayError: any = \"\";\n\n  isDisabled: boolean = false;\n\n  constructor(private formBuilder: FormBuilder,\n              private luv2ShopFormService: Luv2ShopFormService,\n              private cartService: CartService,\n              private checkoutService: CheckoutService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n\n    // setup Stripe payment form\n    this.setupStripePaymentForm();\n    \n    this.reviewCartDetails();\n\n    // read the user's email address from browser storage\n    const theEmail = JSON.parse(this.storage.getItem('userEmail'));\n\n    this.checkoutFormGroup = this.formBuilder.group({\n      customer: this.formBuilder.group({\n        firstName: new FormControl('', \n                              [Validators.required, \n                               Validators.minLength(2), \n                               Luv2ShopValidators.notOnlyWhitespace]),\n\n        lastName:  new FormControl('', \n                              [Validators.required, \n                               Validators.minLength(2), \n                               Luv2ShopValidators.notOnlyWhitespace]),\n                               \n        email: new FormControl(theEmail,\n                              [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')])\n      }),\n      shippingAddress: this.formBuilder.group({\n        street: new FormControl('', [Validators.required, Validators.minLength(2), \n                                     Luv2ShopValidators.notOnlyWhitespace]),\n        city: new FormControl('', [Validators.required, Validators.minLength(2), \n                                   Luv2ShopValidators.notOnlyWhitespace]),\n        state: new FormControl('', [Validators.required]),\n        country: new FormControl('', [Validators.required]),\n        zipCode: new FormControl('', [Validators.required, Validators.minLength(2), \n                                      Luv2ShopValidators.notOnlyWhitespace])\n      }),\n      billingAddress: this.formBuilder.group({\n        street: new FormControl('', [Validators.required, Validators.minLength(2), \n                                     Luv2ShopValidators.notOnlyWhitespace]),\n        city: new FormControl('', [Validators.required, Validators.minLength(2), \n                                   Luv2ShopValidators.notOnlyWhitespace]),\n        state: new FormControl('', [Validators.required]),\n        country: new FormControl('', [Validators.required]),\n        zipCode: new FormControl('', [Validators.required, Validators.minLength(2), \n                                      Luv2ShopValidators.notOnlyWhitespace])\n      }),\n      creditCard: this.formBuilder.group({\n        /*\n        cardType: new FormControl('', [Validators.required]),\n        nameOnCard:  new FormControl('', [Validators.required, Validators.minLength(2), \n                                          Luv2ShopValidators.notOnlyWhitespace]),\n        cardNumber: new FormControl('', [Validators.required, Validators.pattern('[0-9]{16}')]),\n        securityCode: new FormControl('', [Validators.required, Validators.pattern('[0-9]{3}')]),\n        expirationMonth: [''],\n        expirationYear: ['']\n        */\n      })\n    });\n\n    /*\n    // populate credit card months\n\n    const startMonth: number = new Date().getMonth() + 1;\n    console.log(\"startMonth: \" + startMonth);\n\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\n      data => {\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\n        this.creditCardMonths = data;\n      }\n    );\n\n    // populate credit card years\n\n    this.luv2ShopFormService.getCreditCardYears().subscribe(\n      data => {\n        console.log(\"Retrieved credit card years: \" + JSON.stringify(data));\n        this.creditCardYears = data;\n      }\n    );\n    */\n\n    // populate countries\n\n    this.luv2ShopFormService.getCountries().subscribe(\n      data => {\n        console.log(\"Retrieved countries: \" + JSON.stringify(data));\n        this.countries = data;\n      }\n    );\n  }\n\n  setupStripePaymentForm() {\n\n    // get a handle to stripe elements\n    var elements = this.stripe.elements();\n\n    // Create a card element ... and hide the zip-code field\n    this.cardElement = elements.create('card', { hidePostalCode: true });\n\n    // Add an instance of card UI component into the 'card-element' div\n    this.cardElement.mount('#card-element');\n\n    // Add event binding for the 'change' event on the card element\n    this.cardElement.on('change', (event) => {\n\n      // get a handle to card-errors element\n      this.displayError = document.getElementById('card-errors');\n\n      if (event.complete) {\n        this.displayError.textContent = \"\";\n      } else if (event.error) {\n        // show validation error to customer\n        this.displayError.textContent = event.error.message;\n      }\n\n    });\n\n  }\n\n  reviewCartDetails() {\n\n    // subscribe to cartService.totalQuantity\n    this.cartService.totalQuantity.subscribe(\n      totalQuantity => this.totalQuantity = totalQuantity\n    );\n\n    // subscribe to cartService.totalPrice\n    this.cartService.totalPrice.subscribe(\n      totalPrice => this.totalPrice = totalPrice\n    );\n\n  }\n\n  get firstName() { return this.checkoutFormGroup.get('customer.firstName'); }\n  get lastName() { return this.checkoutFormGroup.get('customer.lastName'); }\n  get email() { return this.checkoutFormGroup.get('customer.email'); }\n\n  get shippingAddressStreet() { return this.checkoutFormGroup.get('shippingAddress.street'); }\n  get shippingAddressCity() { return this.checkoutFormGroup.get('shippingAddress.city'); }\n  get shippingAddressState() { return this.checkoutFormGroup.get('shippingAddress.state'); }\n  get shippingAddressZipCode() { return this.checkoutFormGroup.get('shippingAddress.zipCode'); }\n  get shippingAddressCountry() { return this.checkoutFormGroup.get('shippingAddress.country'); }\n\n  get billingAddressStreet() { return this.checkoutFormGroup.get('billingAddress.street'); }\n  get billingAddressCity() { return this.checkoutFormGroup.get('billingAddress.city'); }\n  get billingAddressState() { return this.checkoutFormGroup.get('billingAddress.state'); }\n  get billingAddressZipCode() { return this.checkoutFormGroup.get('billingAddress.zipCode'); }\n  get billingAddressCountry() { return this.checkoutFormGroup.get('billingAddress.country'); }\n\n  get creditCardType() { return this.checkoutFormGroup.get('creditCard.cardType'); }\n  get creditCardNameOnCard() { return this.checkoutFormGroup.get('creditCard.nameOnCard'); }\n  get creditCardNumber() { return this.checkoutFormGroup.get('creditCard.cardNumber'); }\n  get creditCardSecurityCode() { return this.checkoutFormGroup.get('creditCard.securityCode'); }\n\n\n\n  copyShippingAddressToBillingAddress(event) {\n\n    if (event.target.checked) {\n      this.checkoutFormGroup.controls.billingAddress\n            .setValue(this.checkoutFormGroup.controls.shippingAddress.value);\n\n      // bug fix for states\n      this.billingAddressStates = this.shippingAddressStates;\n\n    }\n    else {\n      this.checkoutFormGroup.controls.billingAddress.reset();\n\n      // bug fix for states\n      this.billingAddressStates = [];\n    }\n    \n  }\n\n  onSubmit() {\n    console.log(\"Handling the submit button\");\n\n    if (this.checkoutFormGroup.invalid) {\n      this.checkoutFormGroup.markAllAsTouched();\n      return;\n    }\n\n    // set up order\n    let order = new Order();\n    order.totalPrice = this.totalPrice;\n    order.totalQuantity = this.totalQuantity;\n\n    // get cart items\n    const cartItems = this.cartService.cartItems;\n\n    // create orderItems from cartItems\n    // - long way\n    /*\n    let orderItems: OrderItem[] = [];\n    for (let i=0; i < cartItems.length; i++) {\n      orderItems[i] = new OrderItem(cartItems[i]);\n    }\n    */\n\n    // - short way of doing the same thingy\n    let orderItems: OrderItem[] = cartItems.map(tempCartItem => new OrderItem(tempCartItem));\n\n    // set up purchase\n    let purchase = new Purchase();\n    \n    // populate purchase - customer\n    purchase.customer = this.checkoutFormGroup.controls['customer'].value;\n    \n    // populate purchase - shipping address\n    purchase.shippingAddress = this.checkoutFormGroup.controls['shippingAddress'].value;\n    const shippingState: State = JSON.parse(JSON.stringify(purchase.shippingAddress.state));\n    const shippingCountry: Country = JSON.parse(JSON.stringify(purchase.shippingAddress.country));\n    purchase.shippingAddress.state = shippingState.name;\n    purchase.shippingAddress.country = shippingCountry.name;\n\n    // populate purchase - billing address\n    purchase.billingAddress = this.checkoutFormGroup.controls['billingAddress'].value;\n    const billingState: State = JSON.parse(JSON.stringify(purchase.billingAddress.state));\n    const billingCountry: Country = JSON.parse(JSON.stringify(purchase.billingAddress.country));\n    purchase.billingAddress.state = billingState.name;\n    purchase.billingAddress.country = billingCountry.name;\n  \n    // populate purchase - order and orderItems\n    purchase.order = order;\n    purchase.orderItems = orderItems;\n\n    // compute payment info\n    this.paymentInfo.amount = Math.round(this.totalPrice * 100);\n    this.paymentInfo.currency = \"USD\"; \n    this.paymentInfo.receiptEmail = purchase.customer.email;\n\n    // if valid form then\n    // - create payment intent\n    // - confirm card payment\n    // - place order\n\n    if (!this.checkoutFormGroup.invalid && this.displayError.textContent === \"\") {\n\n      this.isDisabled = true;\n\n      this.checkoutService.createPaymentIntent(this.paymentInfo).subscribe(\n        (paymentIntentResponse) => {\n          this.stripe.confirmCardPayment(paymentIntentResponse.client_secret,\n            {\n              payment_method: {\n                card: this.cardElement,\n                billing_details: {\n                  email: purchase.customer.email,\n                  name: `${purchase.customer.firstName} ${purchase.customer.lastName}`,\n                  address: {\n                    line1: purchase.billingAddress.street,\n                    city: purchase.billingAddress.city,\n                    state: purchase.billingAddress.state,\n                    postal_code: purchase.billingAddress.zipCode,\n                    country: this.billingAddressCountry.value.code\n                  }\n                }\n              }\n            }, { handleActions: false })\n          .then(function(result) {\n            if (result.error) {\n              // inform the customer there was an error\n              alert(`There was an error: ${result.error.message}`);\n              this.isDisabled = false;\n            } else {\n              // call REST API via the CheckoutService\n              this.checkoutService.placeOrder(purchase).subscribe({\n                next: response => {\n                  alert(`Your order has been received.\\nOrder tracking number: ${response.orderTrackingNumber}`);\n\n                  // reset cart\n                  this.resetCart();\n                  this.isDisabled = false;\n                },\n                error: err => {\n                  alert(`There was an error: ${err.message}`);\n                  this.isDisabled = false;\n                }\n              })\n            }            \n          }.bind(this));\n        }\n      );\n    } else {\n      this.checkoutFormGroup.markAllAsTouched();\n      return;\n    }\n\n  }\n\n  resetCart() {\n    // reset cart data\n    this.cartService.cartItems = [];\n    this.cartService.totalPrice.next(0);\n    this.cartService.totalQuantity.next(0);\n    this.cartService.persistCartItems();\n    \n    // reset the form\n    this.checkoutFormGroup.reset();\n\n    // navigate back to the products page\n    this.router.navigateByUrl(\"/products\");\n  }\n\n  /*\n  handleMonthsAndYears() {\n\n    const creditCardFormGroup = this.checkoutFormGroup.get('creditCard');\n\n    const currentYear: number = new Date().getFullYear();\n    const selectedYear: number = Number(creditCardFormGroup.value.expirationYear);\n\n    // if the current year equals the selected year, then start with the current month\n\n    let startMonth: number;\n\n    if (currentYear === selectedYear) {\n      startMonth = new Date().getMonth() + 1;\n    }\n    else {\n      startMonth = 1;\n    }\n\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\n      data => {\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\n        this.creditCardMonths = data;\n      }\n    );\n  }\n  */\n\n  getStates(formGroupName: string) {\n\n    const formGroup = this.checkoutFormGroup.get(formGroupName);\n\n    const countryCode = formGroup.value.country.code;\n    const countryName = formGroup.value.country.name;\n\n    console.log(`${formGroupName} country code: ${countryCode}`);\n    console.log(`${formGroupName} country name: ${countryName}`);\n\n    this.luv2ShopFormService.getStates(countryCode).subscribe(\n      data => {\n\n        if (formGroupName === 'shippingAddress') {\n          this.shippingAddressStates = data; \n        }\n        else {\n          this.billingAddressStates = data;\n        }\n\n        // select first item by default\n        formGroup.get('state').setValue(data[0]);\n      }\n    );\n  }\n}\n","<div class=\"main-content page-m\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n\n            <form [formGroup]=\"checkoutFormGroup\" (ngSubmit)=\"onSubmit()\">\n\n                <!-- customer form group -->\n                <div formGroupName=\"customer\" class=\"form-area\">\n                    <h3>Customer</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>First Name</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"firstName\" type=\"text\">\n\n                                <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"firstName.errors.required || firstName.errors.notOnlyWhitespace\">\n                                        First Name is required\n                                    </div>\n\n                                    <div *ngIf=\"firstName.errors.minlength\">\n                                        First Name must be at least 2 characters long\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Last Name</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"lastName\" type=\"text\">\n\n                                <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"lastName.errors.required || lastName.errors.notOnlyWhitespace\">\n                                        Last Name is required\n                                    </div>\n\n                                    <div *ngIf=\"lastName.errors.minlength\">\n                                        Last Name must be at least 2 characters long\n                                    </div>\n\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Email</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"email\" type=\"text\">\n\n                                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger mt-1\">\n\n                                    <div *ngIf=\"email.errors.required\">\n                                        Email is required\n                                    </div>\n\n                                    <div *ngIf=\"email.errors.pattern\">\n                                        Email must be a valid email address format\n                                    </div>\n\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- shipping Address -->\n                <div formGroupName=\"shippingAddress\" class=\"form-area\">\n                    <h3>Shipping Address</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Country</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"country\" (change)=\"getStates('shippingAddress')\">\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                                        {{ country.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"shippingAddressCountry.invalid && (shippingAddressCountry.dirty || shippingAddressCountry.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressCountry.errors.required\">\n                                        Country is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Street</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"street\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressStreet.invalid && (shippingAddressStreet.dirty || shippingAddressStreet.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressStreet.errors.required || shippingAddressStreet.errors.notOnlyWhitespace\">\n                                        Street is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressStreet.errors.minlength\">\n                                        Street must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>City</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"city\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressCity.invalid && (shippingAddressCity.dirty || shippingAddressCity.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressCity.errors.required || shippingAddressCity.errors.notOnlyWhitespace\">\n                                        City is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressCity.errors.minlength\">\n                                        City must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>State</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"state\">\n                                    <option *ngFor=\"let state of shippingAddressStates\" [ngValue]=\"state\">\n                                        {{ state.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"shippingAddressState.invalid && (shippingAddressState.dirty || shippingAddressState.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressState.errors.required\">\n                                        State is required\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Zip Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"zipCode\" type=\"text\">\n\n                                <div *ngIf=\"shippingAddressZipCode.invalid && (shippingAddressZipCode.dirty || shippingAddressZipCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"shippingAddressZipCode.errors.required || shippingAddressZipCode.errors.notOnlyWhitespace\">\n                                        Zip code is required\n                                    </div>\n                                    <div *ngIf=\"shippingAddressZipCode.errors.minlength\">\n                                        Zip code must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!-- Add check box to copy shipping to billing -->\n                <div class=\"input-space\">\n                    <label class=\"au-checkbox\">\n                        <input type=\"checkbox\" (change)=\"copyShippingAddressToBillingAddress($event)\">\n                        <span class=\"au-checkmark\"></span>Billing Address same as Shipping Address\n                    </label>\n                </div>\n\n\n                <!-- Billing Address -->\n                <div formGroupName=\"billingAddress\" class=\"form-area\">\n                    <h3>Billing Address</h3>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Country</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"country\" (change)=\"getStates('billingAddress')\">\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                                        {{ country.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"billingAddressCountry.invalid && (billingAddressCountry.dirty || billingAddressCountry.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressCountry.errors.required\">\n                                        Country is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Street</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"street\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressStreet.invalid && (billingAddressStreet.dirty || billingAddressStreet.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressStreet.errors.required || billingAddressStreet.errors.notOnlyWhitespace\">\n                                        Street is required\n                                    </div>\n                                    <div *ngIf=\"billingAddressStreet.errors.minlength\">\n                                        Street must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>City</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"city\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressCity.invalid && (billingAddressCity.dirty || billingAddressCity.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressCity.errors.required || billingAddressCity.errors.notOnlyWhitespace\">\n                                        City is required\n                                    </div>\n                                    <div *ngIf=\"billingAddressCity.errors.minlength\">\n                                        City must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>State</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <select formControlName=\"state\">\n                                    <option *ngFor=\"let state of billingAddressStates\" [ngValue]=\"state\">\n                                        {{ state.name }}\n                                    </option>\n                                </select>\n\n                                <div *ngIf=\"billingAddressState.invalid && (billingAddressState.dirty || billingAddressState.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressState.errors.required\">\n                                        State is required\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-2\"> <label>Zip Code</label></div>\n                        <div class=\"col-md-9\">\n                            <div class=\"input-space\">\n                                <input formControlName=\"zipCode\" type=\"text\">\n\n                                <div *ngIf=\"billingAddressZipCode.invalid && (billingAddressZipCode.dirty || billingAddressZipCode.touched)\" class=\"alert alert-danger mt-1\">\n                                    <div *ngIf=\"billingAddressZipCode.errors.required || billingAddressZipCode.errors.notOnlyWhitespace\">\n                                        Zip code is required\n                                    </div>\n\n                                    <div *ngIf=\"billingAddressZipCode.errors.minlength\">\n                                        Zip code must be at least 2 characters long\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                \n                <!-- Stripe Elements Credit Card Section -->\n                <div formGroupName=\"creditCard\" class=\"form-area\">\n\n                    <h3>Credit or Debit Card</h3>\n\n                    <div id=\"card-element\">\n                        <!-- a Stripe element will be inserted here -->\n                    </div>\n\n                    <!-- Used to display form errors -->\n                    <div id=\"card-errors\" class=\"displayError.textContent!=='': 'alert alert-danger mt-1'\"></div>\n\n                </div>\n\n                <!-- Order details -->\n                <div class=\"form-area\">\n                    <h3>Review Your Order</h3>\n\n                    <p>Total Quantity: {{ totalQuantity }}</p>\n                    <p>Shipping: FREE</p>\n                    <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\n                </div>\n\n                <!-- submit button-->\n                <div class=\"text-center\">\n                    <button type=\"submit\" class=\"btn btn-info\" [disabled]=\"isDisabled\">Purchase</button>\n                </div>\n\n            </form>\n\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  doSearch(value: string) {\n    console.log(`value=${value}`);\n    this.router.navigateByUrl(`/search/${value}`);\n  }\n}\n","<div class=\"form-header\">\n\n    <input #myInput type=\"text\" \n           placeholder=\"Search for products ...\"\n           class=\"au-input au-input-xl\"\n           (keyup.enter)=\"doSearch(myInput.value)\"  />\n\n    <button (click)=\"doSearch(myInput.value)\" class=\"au-btn-submit\">\n        Search\n    </button>\n\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Purchase } from '../common/purchase';\nimport { PaymentInfo } from '../common/payment-info';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckoutService {\n\n  private purchaseUrl = environment.luv2shopApiUrl + '/checkout/purchase';\n\n  private paymentIntentUrl = environment.luv2shopApiUrl + '/checkout/payment-intent';\n  \n  constructor(private httpClient: HttpClient) { }\n\n  placeOrder(purchase: Purchase): Observable<any> {\n    return this.httpClient.post<Purchase>(this.purchaseUrl, purchase);    \n  }\n\n  createPaymentIntent(paymentInfo: PaymentInfo): Observable<any> {\n    return this.httpClient.post<PaymentInfo>(this.paymentIntentUrl, paymentInfo);\n  }\n  \n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-ecommerce';\n}\n","<div class=\"page-wrapper\">\n\n  <!-- MENU SIDEBAR-->\n  <aside class=\"menu-sidebar d-none d-lg-block\">\n    <div class=\"logo\">\n      <a routerLink=\"/products\">\n        <img src=\"assets/images/logo.png\" alt=\"luv2shop\" class=\"img-responsive\">\n      </a>\n    </div>\n\n    <app-product-category-menu></app-product-category-menu>\n\n  </aside>\n  <!-- END MENU SIDEBAR-->\n\n  <div class=\"page-container\">\n    <!-- HEADER DESKTOP-->\n    <header class=\"header-desktop\">\n      <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n          <div class=\"header-wrap\">\n\n            <app-search></app-search>\n\n            <app-login-status></app-login-status>\n \n            <app-cart-status></app-cart-status>\n\n          </div>\n          <div class=\"account-wrap\"></div>\n        </div>\n      </div>\n    </header>\n    <!-- END HEADER DESKTOP-->\n\n    <!-- MAIN CONTENT-->\n    <router-outlet></router-outlet>\n\n  </div>\n</div>\n\n<!-- ENDS PAGE CONTAINER -->\n\n<footer>\n  <ul>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Contact Us</a></li>\n    <li><a href=\"#\">Help</a></li>\n  </ul>\n</footer>","export class Product {\n    id: string;\n    sku: string;\n    name: string;\n    description: string;\n    unitPrice: number;\n    imageUrl: string;\n    active: boolean;\n    unitsInStock: number;\n    dateCreated: Date;\n    lastUpdate: Date;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { OktaAuthService } from '@okta/okta-angular';\nimport * as OktaSignIn from '@okta/okta-signin-widget';\n\nimport myAppConfig from '../../config/my-app-config';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  oktaSignin: any;\n\n  constructor(private oktaAuthService: OktaAuthService) { \n\n    this.oktaSignin = new OktaSignIn({\n      logo: 'assets/images/logo.png',\n      features: {\n        registration: true\n      },\n      baseUrl: myAppConfig.oidc.issuer.split('/oauth2')[0],\n      clientId: myAppConfig.oidc.clientId,\n      redirectUri: myAppConfig.oidc.redirectUri,\n      authParams: {\n        pkce: true,\n        issuer: myAppConfig.oidc.issuer,\n        scopes: myAppConfig.oidc.scopes\n      }\n    });\n\n  }\n\n  ngOnInit(): void {\n    this.oktaSignin.remove();\n\n    this.oktaSignin.renderEl({\n      el: '#okta-sign-in-widget'}, // this name should be same as div tag id in login.component.html\n      (response) => {\n        if (response.status === 'SUCCESS') {\n          this.oktaAuthService.signInWithRedirect();\n        }\n      },\n      (error) => {\n        throw error;\n      }\n    );\n  }\n\n}\n","<!-- Container to inject the Okta Sign-In Widget -->\n<div class=\"pt=5\">\n    <div id=\"okta-sign-in-widget\" class=\"pt-5\"></div>\n</div>\n","import { CartItem } from './cart-item';\n\nexport class OrderItem {\n    imageUrl: string;\n    unitPrice: number;\n    quantity: number;\n    productId: string;\n\n    constructor(cartItem: CartItem) {\n        this.imageUrl = cartItem.imageUrl;\n        this.quantity = cartItem.quantity;\n        this.unitPrice = cartItem.unitPrice;\n        this.productId = cartItem.id;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-status',\n  templateUrl: './cart-status.component.html',\n  styleUrls: ['./cart-status.component.css']\n})\nexport class CartStatusComponent implements OnInit {\n\n  totalPrice: number = 0.00;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.updateCartStatus();\n  }\n\n  updateCartStatus() {\n\n    // subscribe to the cart totalPrice\n    this.cartService.totalPrice.subscribe(\n      data => this.totalPrice = data\n    );\n\n    // subscribe to the cart totalQuantity\n    this.cartService.totalQuantity.subscribe(\n      data => this.totalQuantity = data\n    );\n\n  }\n\n}\n","<div class=\"cart-area d-n\">\n    <a routerLink=\"/cart-details\">\n        <div class=\"total\">{{ totalPrice | currency: 'USD' }}\n            <span>{{ totalQuantity }}</span> \n        </div> \n        <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>\n    </a>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ProductService } from './services/product.service';\n\nimport { Routes, RouterModule, Router} from '@angular/router';\nimport { ProductCategoryMenuComponent } from './components/product-category-menu/product-category-menu.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { ProductDetailsComponent } from './components/product-details/product-details.component';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartStatusComponent } from './components/cart-status/cart-status.component';\nimport { CartDetailsComponent } from './components/cart-details/cart-details.component';\nimport { CheckoutComponent } from './components/checkout/checkout.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './components/login/login.component';\nimport { LoginStatusComponent } from './components/login-status/login-status.component';\n\nimport {\n  OKTA_CONFIG,\n  OktaAuthModule,\n  OktaCallbackComponent,\n  OktaAuthGuard\n} from '@okta/okta-angular';\n\nimport myAppConfig from './config/my-app-config';\nimport { MembersPageComponent } from './components/members-page/members-page.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { AuthInterceptorService } from './services/auth-interceptor.service';\n\nconst oktaConfig = Object.assign({\n  onAuthRequired: (oktaAuth, injector) => {\n    const router = injector.get(Router);\n\n    // Redirect the user to your custom login page\n    router.navigate(['/login']);\n  }\n}, myAppConfig.oidc);\n\nconst routes: Routes = [\n  {path: 'order-history', component: OrderHistoryComponent, canActivate: [ OktaAuthGuard ]},\n  {path: 'members', component: MembersPageComponent, canActivate: [ OktaAuthGuard ]},\n\n  {path: 'login/callback', component: OktaCallbackComponent},\n  {path: 'login', component: LoginComponent},\n\n  {path: 'checkout', component: CheckoutComponent},\n  {path: 'cart-details', component: CartDetailsComponent},\n  {path: 'products/:id', component: ProductDetailsComponent},\n  {path: 'search/:keyword', component: ProductListComponent},\n  {path: 'category/:id', component: ProductListComponent},\n  {path: 'category', component: ProductListComponent},\n  {path: 'products', component: ProductListComponent},\n  {path: '', redirectTo: '/products', pathMatch: 'full'},\n  {path: '**', redirectTo: '/products', pathMatch: 'full'}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProductListComponent,\n    ProductCategoryMenuComponent,\n    SearchComponent,\n    ProductDetailsComponent,\n    CartStatusComponent,\n    CartDetailsComponent,\n    CheckoutComponent,\n    LoginComponent,\n    LoginStatusComponent,\n    MembersPageComponent,\n    OrderHistoryComponent\n  ],\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserModule,\n    HttpClientModule,\n    NgbModule,\n    ReactiveFormsModule,\n    OktaAuthModule\n  ],\n  providers: [ProductService, { provide: OKTA_CONFIG, useValue: oktaConfig },\n              {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ProductCategory } from 'src/app/common/product-category';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-category-menu',\n  templateUrl: './product-category-menu.component.html',\n  styleUrls: ['./product-category-menu.component.css']\n})\nexport class ProductCategoryMenuComponent implements OnInit {\n\n  productCategories: ProductCategory[];\n  \n  constructor(private productService: ProductService) { }\n\n  ngOnInit() {\n    this.listProductCategories();\n  }\n\n  listProductCategories() {\n\n    this.productService.getProductCategories().subscribe(\n      data => {\n        console.log('Product Categories=' + JSON.stringify(data));\n        this.productCategories = data;\n      }\n    );\n  }\n\n}\n","<div class=\"menu-sidebar-content js-scrollbar1\">\n    <nav class=\"navbar-sidebar\">\n        <ul class=\"list-unstyled navbar-list\">\n\n            <li *ngFor=\"let tempProductCategory of productCategories\">\n\n                <a routerLink=\"/category/{{ tempProductCategory.id }}\" routerLinkActive=\"active-link\">\n                    {{ tempProductCategory.categoryName }}\n                </a>\n\n            </li>\n        \n        </ul>\n    </nav>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Product } from 'src/app/common/product';\nimport { ProductService } from 'src/app/services/product.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CartItem } from 'src/app/common/cart-item';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n\n  product: Product = new Product();\n\n  constructor(private productService: ProductService,\n              private cartService: CartService,\n              private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.handleProductDetails();\n    })\n  }\n\n  handleProductDetails() {\n\n    // get the \"id\" param string. convert string to a number using the \"+\" symbol\n    const theProductId: number = +this.route.snapshot.paramMap.get('id');\n\n    this.productService.getProduct(theProductId).subscribe(\n      data => {\n        this.product = data;\n      }\n    )\n  }\n\n  addToCart() {\n\n    console.log(`Adding to cart: ${this.product.name}, ${this.product.unitPrice}`);\n    const theCartItem = new CartItem(this.product);\n    this.cartService.addToCart(theCartItem);\n    \n  }\n\n}\n","<div class=\"detail-section\">\n    <div class=\"container-fluid\">\n\n        <img src=\"{{ product.imageUrl }}\" class=\"detail-img\">\n\n        <h3>{{ product.name }}</h3>\n        <div class=\"price\">{{ product.unitPrice | currency:'USD' }}</div>\n        <button (click)=\"addToCart()\" class=\"btn btn-primary btn-sm\">Add to cart</button>\n\n        <hr>\n        <h4>Description</h4>\n        <p>{{ product.description }}</p>\n\n        <a routerLink=\"/products\" class=\"mt-5\">Back to Product List</a>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from 'src/app/services/product.service';\nimport { Product } from 'src/app/common/product';\nimport { ActivatedRoute } from '@angular/router';\nimport { timeoutWith } from 'rxjs/operators';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list-grid.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n\n  products: Product[] = [];\n  currentCategoryId: number = 1;\n  previousCategoryId: number = 1;\n  searchMode: boolean = false;\n\n  // new properties for pagination\n  thePageNumber: number = 1;\n  thePageSize: number = 5;\n  theTotalElements: number = 0;\n\n  previousKeyword: string = null;\n\n  constructor(private productService: ProductService,\n              private cartService: CartService,\n              private route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n  }\n\n  listProducts() {\n\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\n\n    if (this.searchMode) {\n      this.handleSearchProducts();\n    }\n    else {\n      this.handleListProducts();\n    }\n\n  }\n\n  handleSearchProducts() {\n\n    const theKeyword: string = this.route.snapshot.paramMap.get('keyword');\n\n    // if we have a different keyword than previous\n    // then set thePageNumber to 1\n\n    if (this.previousKeyword != theKeyword) {\n      this.thePageNumber = 1;\n    }\n\n    this.previousKeyword = theKeyword;\n\n    console.log(`keyword=${theKeyword}, thePageNumber=${this.thePageNumber}`);\n\n    // now search for the products using keyword\n    this.productService.searchProductsPaginate(this.thePageNumber - 1,\n                                               this.thePageSize,\n                                               theKeyword).subscribe(this.processResult());\n                                               \n  }\n\n  handleListProducts() {\n\n    // check if \"id\" parameter is available\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id');\n\n    if (hasCategoryId) {\n      // get the \"id\" param string. convert string to a number using the \"+\" symbol\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\n    }\n    else {\n      // not category id available ... default to category id 1\n      this.currentCategoryId = 1;\n    }\n\n    //\n    // Check if we have a different category than previous\n    // Note: Angular will reuse a component if it is currently being viewed\n    //\n\n    // if we have a different category id than previous\n    // then set thePageNumber back to 1\n    if (this.previousCategoryId != this.currentCategoryId) {\n      this.thePageNumber = 1;\n    }\n\n    this.previousCategoryId = this.currentCategoryId;\n\n    console.log(`currentCategoryId=${this.currentCategoryId}, thePageNumber=${this.thePageNumber}`);\n\n    // now get the products for the given category id\n    this.productService.getProductListPaginate(this.thePageNumber - 1,\n                                               this.thePageSize,\n                                               this.currentCategoryId)\n                                               .subscribe(this.processResult());\n  }\n\n  processResult() {\n    return data => {\n      this.products = data._embedded.products;\n      this.thePageNumber = data.page.number + 1;\n      this.thePageSize = data.page.size;\n      this.theTotalElements = data.page.totalElements;\n    };\n  }\n\n  updatePageSize(pageSize: number) {\n    this.thePageSize = pageSize;\n    this.thePageNumber = 1;\n    this.listProducts();\n  }\n\n  addToCart(theProduct: Product) {\n    \n    console.log(`Adding to cart: ${theProduct.name}, ${theProduct.unitPrice}`);\n\n    // TODO ... do the real work\n    const theCartItem = new CartItem(theProduct);\n\n    this.cartService.addToCart(theCartItem);\n  }\n\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n\n                <!-- loop over the collection of products -->\n                <div *ngFor=\"let tempProduct of products\" class=\"col-md-3\">\n\n                    <div class=\"product-box\">\n\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\n                            <img src=\"{{ tempProduct.imageUrl }}\" class=\"img-responsive\">\n                        </a>\n\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\n                            <h1>{{ tempProduct.name }}</h1>\n                        </a>\n                        \n                        <div class=\"price\">{{ tempProduct.unitPrice | currency:'USD' }}</div>\n                        <button (click)=\"addToCart(tempProduct)\" class=\"btn btn-primary btn-sm\">Add to cart</button>\n                    </div>\n\n                </div>\n\n                <!-- if products empty then display a message-->\n                <div *ngIf=\"products?.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                    No products found.\n                </div>\n\n            </div>\n\n            <!-- begin footer -->\n            <div class=\"footer-pagination\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\"></div>\n\n                    <div class=\"col-md-6\">\n                        <div class=\"row\">\n                            <div class=\"col-md-9\" style=\"padding-left: 30%\">\n                            \n                                <ngb-pagination [(page)]=\"thePageNumber\"\n                                                [pageSize]=\"thePageSize\"\n                                                [collectionSize]=\"theTotalElements\"\n                                                [maxSize]=\"5\"\n                                                [boundaryLinks]=\"true\"\n                                                (pageChange)=\"listProducts()\">\n\n                                </ngb-pagination>\n\n                            </div>\n\n                            <div class=\"col-md-3 mt-2\" style=\"text-align: right;\">\n                                <span class=\"mr-2\">Page Size</span>\n\n                                <select (change)=\"updatePageSize($event.target.value)\">\n                                    <option>2</option>\n                                    <option selected=\"true\">5</option>\n                                    <option>10</option>\n                                    <option>20</option>\n                                    <option>50</option>\n                                </select>\n                            </div>\n\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n            <!-- end footer -->\n\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { CartItem } from '../common/cart-item';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  cartItems: CartItem[] = [];\n\n  totalPrice: Subject<number> = new BehaviorSubject<number>(0);\n  totalQuantity: Subject<number> = new BehaviorSubject<number>(0);\n\n  storage: Storage = sessionStorage;\n  // storage: Storage = localStorage;\n\n  constructor() { \n\n      // read data from storage\n      let data = JSON.parse(this.storage.getItem('cartItems'));\n\n      if (data != null) {\n        this.cartItems = data;\n        \n        // compute totals based on the data that is read from storage\n        this.computeCartTotals();\n      }\n\n  }\n\n  addToCart(theCartItem: CartItem) {\n\n    // check if we already have the item in our cart\n    let alreadyExistsInCart: boolean = false;\n    let existingCartItem: CartItem = undefined;\n\n    if (this.cartItems.length > 0) {\n      // find the item in the cart based on item id\n\n      existingCartItem = this.cartItems.find( tempCartItem => tempCartItem.id === theCartItem.id );\n\n      // check if we found it\n      alreadyExistsInCart = (existingCartItem != undefined);\n    }\n\n    if (alreadyExistsInCart) {\n      // increment the quantity\n      existingCartItem.quantity++;\n    }\n    else {\n      // just add the item to the array\n      this.cartItems.push(theCartItem);\n    }\n\n    // compute cart total price and total quantity\n    this.computeCartTotals();\n  }\n\n  computeCartTotals() {\n\n    let totalPriceValue: number = 0;\n    let totalQuantityValue: number = 0;\n\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n\n    // publish the new values ... all subscribers will receive the new data\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n\n    // log cart data just for debugging purposes\n    this.logCartData(totalPriceValue, totalQuantityValue);\n\n    // persist cart data\n    this.persistCartItems();\n  }\n\n  persistCartItems() {\n    this.storage.setItem('cartItems', JSON.stringify(this.cartItems));\n  }\n\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\n\n    console.log('Contents of the cart');\n    for (let tempCartItem of this.cartItems) {\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n      console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\n    }\n\n    console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n    console.log('----');\n  }\n\n  decrementQuantity(theCartItem: CartItem) {\n\n    theCartItem.quantity--;\n\n    if (theCartItem.quantity === 0) {\n      this.remove(theCartItem);\n    }\n    else {\n      this.computeCartTotals();\n    }\n  }\n\n  remove(theCartItem: CartItem) {\n\n    // get index of item in the array\n    const itemIndex = this.cartItems.findIndex( tempCartItem => tempCartItem.id === theCartItem.id );\n\n    // if found, remove the item from the array at the given index\n    if (itemIndex > -1) {\n      this.cartItems.splice(itemIndex, 1);\n\n      this.computeCartTotals();\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { OrderHistory } from '../../common/order-history';\nimport { OrderHistoryService } from '../../services/order-history.service';\n\n@Component({\n  selector: 'app-order-history',\n  templateUrl: './order-history.component.html',\n  styleUrls: ['./order-history.component.css']\n})\nexport class OrderHistoryComponent implements OnInit {\n\n  orderHistoryList: OrderHistory[] = [];\n  storage: Storage = sessionStorage;\n\n  constructor(private orderHistoryService: OrderHistoryService) { }\n\n  ngOnInit(): void {\n    this.handleOrderHistory();\n  }\n\n  handleOrderHistory() {\n\n    // read the user's email address from browser storage\n    const theEmail = JSON.parse(this.storage.getItem('userEmail'));\n\n    // retrieve data from the service\n    this.orderHistoryService.getOrderHistory(theEmail).subscribe(\n      data => {\n        this.orderHistoryList = data._embedded.orders;\n      }\n    );\n  }\n\n}\n","<div class=\"main-content\">\n    <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n            <h3>Your Orders</h3>\n\n            <div *ngIf=\"orderHistoryList.length > 0\">\n                <table class=\"table table-bordered\">\n                    <tr>\n                        <th width=\"20%\">Order Tracking Number</th>\n                        <th width=\"10%\">Total Price</th>\n                        <th width=\"10%\">Total Quantity</th>\n                        <th width=\"10%\">Date</th>\n                    </tr>\n\n                    <tr *ngFor=\"let tempOrderHistory of orderHistoryList\">\n                        <td>\n                            {{ tempOrderHistory.orderTrackingNumber }}\n                        </td>\n                        <td>\n                            {{ tempOrderHistory.totalPrice | currency: 'USD' }}\n                        </td>\n                        <td>\n                            {{ tempOrderHistory.totalQuantity }}\n                        </td>\n                        <td>\n                            {{ tempOrderHistory.dateCreated | date: 'medium' }}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n\n            <!-- if order history is empty then display a message -->\n            <div *ngIf=\"orderHistoryList.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n                No orders found.\n            </div>\n\n        </div>\n    </div>\n</div>","export default {\n\n    oidc: {\n        clientId: '0oaahshyjkfSAAlt05d7',\n        issuer: 'https://dev-78760789.okta.com/oauth2/default',\n        redirectUri: 'https://localhost:4200/login/callback',\n        scopes: ['openid', 'profile', 'email']\n    }\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { OktaAuthService } from '@okta/okta-angular';\nimport { from, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(private oktaAuth: OktaAuthService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return from(this.handleAccess(request, next));\n  }\n\n  private async handleAccess(request: HttpRequest<any>, next: HttpHandler): Promise<HttpEvent<any>> { \n\n    // Only add an access token for secured endpoints\n    const theEndpoint = environment.luv2shopApiUrl + '/orders';\n    const securedEndpoints = [theEndpoint];\n\n    if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n\n      // get access token\n      const accessToken = await this.oktaAuth.getAccessToken();\n\n      // clone the request and add new header with access token\n      request = request.clone({\n        setHeaders: {\n          Authorization: 'Bearer ' + accessToken\n        }\n      });\n\n    }\n\n    return next.handle(request).toPromise();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { OktaAuthService } from '@okta/okta-angular';\n\n@Component({\n  selector: 'app-login-status',\n  templateUrl: './login-status.component.html',\n  styleUrls: ['./login-status.component.css']\n})\nexport class LoginStatusComponent implements OnInit {\n\n  isAuthenticated: boolean = false;\n  userFullName: string;\n\n  storage: Storage = sessionStorage;\n\n  constructor(private oktaAuthService: OktaAuthService) { }\n\n  ngOnInit(): void {\n\n    // Subscribe to authentication state changes\n    this.oktaAuthService.$authenticationState.subscribe(\n      (result) => {\n        this.isAuthenticated = result;\n        this.getUserDetails();\n      }\n    );\n    \n  }\n\n  getUserDetails() {\n    if (this.isAuthenticated) {\n\n      // Fetch the logged in user details (user's claims)\n      //\n      // user full name is exposed as a property name\n      this.oktaAuthService.getUser().then(\n        (res) => {\n          this.userFullName = res.name;\n\n          // retrieve the user's email from authentication response\n          const theEmail = res.email;\n\n          // now store the email in browser storage\n          this.storage.setItem('userEmail', JSON.stringify(theEmail));\n        }\n      );\n    }\n  }\n\n  logout() {\n    // Terminates the session with Okta and removes current tokens.\n    this.oktaAuthService.signOut();\n  }\n}\n","<div class=\"login-status-header\">\n\n    <div *ngIf=\"isAuthenticated && userFullName\" class=\"login-status-user-info\">\n        Welcome back {{ userFullName }}!\n    </div>\n\n    <button *ngIf=\"!isAuthenticated\" routerLink=\"/login\" class=\"security-btn\">Login</button>\n\n    <button *ngIf=\"isAuthenticated\" (click)=\"logout()\" class=\"security-btn\">Logout</button>\n\n    <button *ngIf=\"isAuthenticated\" routerLink=\"/members\" class=\"security-btn ml-1\">Member</button>\n\n    <button *ngIf=\"isAuthenticated\" routerLink=\"/order-history\" class=\"security-btn ml-1\">Orders</button>\n\n</div>","import { FormControl, ValidationErrors } from '@angular/forms';\n\nexport class Luv2ShopValidators {\n\n    // whitespace validation\n    static notOnlyWhitespace(control: FormControl) : ValidationErrors {\n        \n        // check if string only contains whitespace\n        if ((control.value != null) && (control.value.trim().length === 0)) {\n\n            // invalid, return error object\n            return { 'notOnlyWhitespace': true };\n        }\n        else {\n            // valid, return null\n            return null;\n        }\n    }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}